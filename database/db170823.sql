-- phpMyAdmin SQL Dump
-- version 3.5.8.2
-- http://www.phpmyadmin.net
--
-- 主机: localhost:3306
-- 生成日期: 2017 年 08 月 23 日 14:44
-- 服务器版本: 5.6.36
-- PHP 版本: 5.3.21

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `tbhblank01`
--

-- --------------------------------------------------------

--
-- 表的结构 `adminusers`
--

CREATE TABLE IF NOT EXISTS `adminusers` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `nickname` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=2 ;

--
-- 转存表中的数据 `adminusers`
--

INSERT INTO `adminusers` (`id`, `name`, `email`, `password`, `remember_token`, `created_at`, `updated_at`, `nickname`) VALUES
(1, 'admin', '157679749@qq.com', '$2y$10$0FKs2SHrZVgVi9jGplNF1uM6weG89/NgE5mziFR3WsIuix4SpxqtK', 'iL9wpTGODwOC6Ambe6e5BHYJhsH3gxYWJLfGMVVGghnbkwPsjfnpiYIzaVTj', '2017-03-16 19:43:58', '2017-03-17 05:55:15', '清尘');

-- --------------------------------------------------------

--
-- 表的结构 `blogs`
--

CREATE TABLE IF NOT EXISTS `blogs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `created_at` int(11) NOT NULL,
  `updated_at` int(11) NOT NULL,
  `click` int(255) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL,
  `tags` varchar(255) DEFAULT NULL,
  `abstract` varchar(255) DEFAULT NULL,
  `thumb_img` varchar(255) NOT NULL,
  `cate_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `cate_id` (`cate_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=76 ;

--
-- 转存表中的数据 `blogs`
--

INSERT INTO `blogs` (`id`, `title`, `content`, `created_at`, `updated_at`, `click`, `user_id`, `tags`, `abstract`, `thumb_img`, `cate_id`) VALUES
(4, '百度编辑器ueditor内容编辑自动套P标签及p标签替换', '<p>百度编辑器ueditor 内容编辑自动套P标签，及p标签 替换。</p><p>如图，红框为回车键和shift+回车 ：</p><p><img src="/upload/image/20170319/1489909819153198.png" alt=""/>&nbsp; &nbsp;===&gt;&gt;&nbsp;<img src="/upload/image/20170319/1489909819753051.png" alt=""/></p><p><span style="color: #3366ff;">&nbsp;ueditor.all.js中:</span>&nbsp;</p><p>1:</p><pre>搜索修改成false：allowDivTransToP:&nbsp;false</pre><pre>再搜索并修改以下：</pre><pre>//编辑器不能为空内容\n\nif&nbsp;(domUtils.isEmptyNode(me.body))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;me.body.innerHTML&nbsp;=&nbsp;&#39;&lt;div&gt;&#39;&nbsp;+&nbsp;(browser.ie&nbsp;?&nbsp;&#39;&#39;&nbsp;:&nbsp;&#39;&lt;br/&gt;&#39;)&nbsp;+&nbsp;&#39;&lt;/div&gt;&#39;;\n}</pre><p>&nbsp;</p><p>2:</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="/upload/image/20170319/1489909819558654.gif" alt="复制代码"/></a></span></div><pre>//给文本或者inline节点套p标签\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(me.options.enterTag&nbsp;==&nbsp;&#39;p&#39;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;child&nbsp;=&nbsp;this.body.firstChild,&nbsp;tmpNode;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!child&nbsp;||&nbsp;child.nodeType&nbsp;==&nbsp;1&nbsp;&amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(dtd.$cdata[child.tagName]&nbsp;||&nbsp;isCdataDiv(child)&nbsp;||\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;domUtils.isCustomeNode(child)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;child&nbsp;===&nbsp;this.body.lastChild)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.body.innerHTML&nbsp;=&nbsp;&#39;&lt;div&gt;&#39;&nbsp;+&nbsp;(browser.ie&nbsp;?&nbsp;&#39;&amp;nbsp;&#39;&nbsp;:&nbsp;&#39;&lt;br/&gt;&#39;)&nbsp;+&nbsp;&#39;&lt;/div&gt;&#39;&nbsp;+&nbsp;this.body.innerHTML;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;p&nbsp;=&nbsp;me.document.createElement(&#39;div&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(child)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(child&nbsp;&amp;&amp;&nbsp;(child.nodeType&nbsp;==&nbsp;3&nbsp;||&nbsp;child.nodeType&nbsp;==&nbsp;1&nbsp;&amp;&amp;&nbsp;dtd.p[child.tagName]&nbsp;&amp;&amp;&nbsp;!dtd.$cdata[child.tagName]))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmpNode&nbsp;=&nbsp;child.nextSibling;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.appendChild(child);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child&nbsp;=&nbsp;tmpNode;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(p.firstChild)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!child)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.body.appendChild(p);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child.parentNode.insertBefore(p,&nbsp;child);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;me.document.createElement(&#39;div&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child&nbsp;=&nbsp;child.nextSibling;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="/upload/image/20170319/1489909819558654.gif" alt="复制代码"/></a></span></div></div><p>&nbsp;<span style="color: #ff0000;">以上类似的有好几处，将p 改为 div</span></p><p>3：</p><pre>上代码框中&nbsp;if&nbsp;(me.options.enterTag&nbsp;==&nbsp;&#39;p&#39;)&nbsp;这个P根据以下开关来走</pre><pre>enterTag:&nbsp;&#39;p&#39;,//改后为回车换行增加br，不改为换行增加div</pre><p>&nbsp;4：</p><pre>//进入编辑器的li要套p标签，我不需要套P，注释掉吧</pre><div class="cnblogs_code"><pre>//进入编辑器的li要套p标签\n&nbsp;&nbsp;&nbsp;&nbsp;/*这里开始注释掉&nbsp;me.addInputRule(function(root){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;utils.each(root.getNodesByTagName(&#39;li&#39;),function(li){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;tmpP&nbsp;=&nbsp;UE.uNode.createElement(&#39;p&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i=&nbsp;0,ci;ci=li.children[i];){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ci.type&nbsp;==&nbsp;&#39;text&#39;&nbsp;||&nbsp;dtd.p[ci.tagName]){</pre></div><p>&nbsp;</p><p>5：以下找到并注释</p><div class="cnblogs_code"><pre>//注释掉，这个是自动给ul增加一个内置的样式，如&lt;ul&nbsp;class=&quot;&nbsp;list-paddingleft-2&quot;&gt;\nnode.className&nbsp;=&nbsp;utils.trim(node.className.replace(/list-paddingleft-\\w+/,))&nbsp;+&nbsp;&nbsp;+&nbsp;type;</pre></div><p>&nbsp;</p><div class="cnblogs_code"><pre>//往下隔一行的这个注释掉，这个是自动去除粘贴进去的代码的li的style样式，为何清除我的样式？\nli.style.cssText&nbsp;&amp;&amp;&nbsp;(li.style.cssText&nbsp;=&nbsp;);</pre></div><p>&nbsp;</p><p>&nbsp;</p><p>参考：http://blog.csdn.net/wdw984/article/details/22375199?utm_source=tuicool&amp;utm_medium=referral</p>', 1488259818, 1503421046, 756, 1, 'ueditor,php', 'UEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码。', 'upload/thumbimg/b151171ed569d815d8d5384d62441719.png', 1),
(28, 'Redis的安装', '<h2>Window 下安装</h2><p><strong>下载地址：</strong><a href="https://github.com/MSOpenTech/redis/releases" target="_blank">https://github.com/MSOpenTech/redis/releases</a>。</p><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 <strong>Redis-x64-xxx.zip</strong>压缩包到 C 盘，解压后，将文件夹重新命名为 <strong>redis</strong>。</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/11/3B8D633F-14CE-42E3-B174-FCCD48B11FF3.jpg"/></p><p>打开一个 <strong>cmd</strong> 窗口 &nbsp;使用cd命令切换目录到 <strong>C:\\redis</strong> &nbsp;运行 <strong>redis-server.exe redis.windows.conf</strong> 。</p><p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/11/redis-install1.png" alt="Redis 安装" class="alignnone size-full wp-image-10143" height="436" width="673"/></p><p>这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。</p><p>切换到redis目录下运行 <strong>redis-cli.exe -h 127.0.0.1 -p 6379</strong> 。</p><p>设置键值对 <strong>set myKey abc</strong></p><p>取出键值对 <strong>get myKey</strong></p><p><img src="http://www.runoob.com/wp-content/uploads/2014/11/redis-install2.jpg" alt="Redis 安装"/></p><hr/><h2>Linux 下安装</h2><p><strong>下载地址：</strong><a href="http://redis.io/download" target="_blank">http://redis.io/download</a>，下载最新文档版本。</p><p>本教程使用的最新文档版本为 2.8.17，下载并安装：</p><pre class="prettyprint prettyprinted" style="">$&nbsp;wget&nbsp;http://download.redis.io/releases/redis-2.8.17.tar.gz$&nbsp;tar&nbsp;xzf&nbsp;redis-2.8.17.tar.gz\r\n$&nbsp;cd&nbsp;redis-2.8.17$&nbsp;make</pre><p>make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：</p><p>下面启动redis服务.</p><pre class="prettyprint prettyprinted" style="">$&nbsp;cd&nbsp;src\r\n$&nbsp;./redis-server</pre><p>注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。</p><pre class="prettyprint prettyprinted" style="">$&nbsp;cd&nbsp;src\r\n$&nbsp;./redis-server&nbsp;redis.conf</pre><p>redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。</p><p>启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。\r\n\r\n比如：</p><pre class="prettyprint prettyprinted" style="">$&nbsp;cd&nbsp;src\r\n$&nbsp;./redis-cli\r\nredis&gt;&nbsp;set&nbsp;foo&nbsp;bar\r\nOK\r\nredis&gt;&nbsp;get&nbsp;foo&quot;bar&quot;</pre><hr/><h2>Ubuntu 下安装</h2><p>在 Ubuntu 系统安装 Redi 可以使用以下命令:</p><pre class="prettyprint prettyprinted" style="">$sudo&nbsp;apt-get&nbsp;update\r\n$sudo&nbsp;apt-get&nbsp;install&nbsp;redis-server</pre><h3>启动 Redis</h3><pre class="prettyprint prettyprinted" style="">$&nbsp;redis-server</pre><h3>查看 redis 是否启动？</h3><pre class="prettyprint prettyprinted" style="">$&nbsp;redis-cli</pre><p>以上命令将打开以下终端：</p><pre class="prettyprint prettyprinted" style="">redis&nbsp;127.0.0.1:6379&gt;</pre><p>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p><pre class="prettyprint prettyprinted" style="">redis&nbsp;127.0.0.1:6379&gt;&nbsp;ping\r\nPONG</pre><p>以上说明我们已经成功安装了redis。</p><p><br/></p>', 1489464188, 1503141945, 201, 1, 'redis', 'Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。', 'upload/thumbimg/269ac65d553517920a04bd4cbac1f98b.png', 2),
(29, 'PHP开发者该知道的5个Composer小技巧', '<p>Composer 是新一代的PHP依赖管理工具。本文介绍使用Composer的五个小技巧，希望能给你的PHP开发带来方便。</p><h2>1. 仅更新单个库</h2><p>只想更新某个特定的库，不想更新它的所有依赖，很简单：</p><pre>composer&nbsp;update&nbsp;foo/bar</pre><p>此外，这个技巧还可以用来解决“警告信息问题”。你一定见过这样的警告信息：</p><pre>Warning:&nbsp;The&nbsp;lock&nbsp;file&nbsp;is&nbsp;not&nbsp;up&nbsp;to&nbsp;date&nbsp;with&nbsp;the&nbsp;latest&nbsp;changes&nbsp;in&nbsp;composer.json,&nbsp;you&nbsp;may&nbsp;be&nbsp;getting&nbsp;outdated&nbsp;dependencies,&nbsp;run&nbsp;update&nbsp;to&nbsp;update&nbsp;them.</pre><p>擦，哪里出问题了？别惊慌！如果你编辑了<code>composer.json</code>，你应该会看到这样的信息。比如，如果你增加或更新了细节信息，比如库的描述、作者、更多参数，甚至仅仅增加了一个空格，都会改变文件的md5sum。然后Composer就会警告你哈希值和<code>composer.lock</code>中记载的不同。</p><p>那么我们该怎么办呢？<code>update</code>命令可以更新lock文件，但是如果仅仅增加了一些描述，应该是不打算更新任何库。这种情况下，只需<code>update nothing</code>：</p><pre>$&nbsp;composer&nbsp;update&nbsp;nothing\r\nLoading&nbsp;composer&nbsp;repositories&nbsp;with&nbsp;package&nbsp;information&nbsp;&nbsp;\r\nUpdating&nbsp;dependencies&nbsp;&nbsp;\r\nNothing&nbsp;to&nbsp;install&nbsp;or&nbsp;update&nbsp;&nbsp;\r\nWriting&nbsp;lock&nbsp;file&nbsp;&nbsp;\r\nGenerating&nbsp;autoload&nbsp;files</pre><p>这样一来，Composer不会更新库，但是会更新<code>composer.lock</code>。注意<code>nothing</code>并不是<code>update</code>命令的关键字。只是没有<code>nothing</code> 这个包导致的结果。如果你输入<code>foobar</code>，结果也一样。</p><p>如果你用的Composer版本足够新，那么你可以直接使用<code>--lock</code>选项：</p><pre>composer&nbsp;update&nbsp;--lock</pre><h2>2. 不编辑<code>composer.json</code>的情况下安装库</h2><p>你可能会觉得每安装一个库都需要修改<code>composer.json</code>太麻烦，那么你可以直接使用<code>require</code>命令。</p><pre>composer&nbsp;require&nbsp;&quot;foo/bar:1.0.0&quot;</pre><p>这个方法也可以用来快速地新开一个项目。<code>init</code>命令有<code>--require</code>选项，可以自动编写<code>composer.json</code>：（注意我们使用<code>-n</code>，这样就不用回答问题）</p><pre>$&nbsp;composer&nbsp;init&nbsp;--require=foo/bar:1.0.0&nbsp;-n\r\n$&nbsp;cat&nbsp;composer.json\r\n{&nbsp;&nbsp;&nbsp;&nbsp;&quot;require&quot;:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;foo/bar&quot;:&nbsp;&quot;1.0.0&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><h2>3. 派生很容易</h2><p>初始化的时候，你试过<code>create-project</code>命令么？</p><pre>composer&nbsp;create-project&nbsp;doctrine/orm&nbsp;path&nbsp;2.2.0</pre><p>这会自动克隆仓库，并检出指定的版本。克隆库的时候用这个命令很方便，不需要搜寻原始的URI了。</p><h2>4. 考虑缓存，<code>dist</code>包优先</h2><p>最近一年以来的Composer会自动存档你下载的<code>dist</code>包。默认设置下，<code>dist</code>包用于加了tag的版本，例如<code>&quot;symfony/symfony&quot;: &quot;v2.1.4&quot;</code>，或者是通配符或版本区间，<code>&quot;2.1.*&quot;</code>或<code>&quot;&gt;=2.2,&lt;2.3-dev&quot;</code>（如果你使用<code>stable</code>作为你的<code>minimum-stability</code>）。</p><p>dist包也可以用于诸如<code>dev-master</code>之类的分支，Github允许你下载某个git引用的压缩包。为了强制使用压缩包，而不是克隆源代码，你可以使用<code>install</code>和<code>update</code>的<code>--prefer-dist</code>选项。</p><p>下面是一个例子（我使用了<code>--profile</code>选项来显示执行时间）：</p><pre>$&nbsp;composer&nbsp;init&nbsp;--require=&quot;twig/twig:1.*&quot;&nbsp;-n&nbsp;--profile\r\nMemory&nbsp;usage:&nbsp;3.94MB&nbsp;(peak:&nbsp;4.08MB),&nbsp;time:&nbsp;0s\r\n\r\n$&nbsp;composer&nbsp;install&nbsp;--profile\r\nLoading&nbsp;composer&nbsp;repositories&nbsp;with&nbsp;package&nbsp;information&nbsp;&nbsp;\r\nInstalling&nbsp;dependencies&nbsp;&nbsp;\r\n&nbsp;&nbsp;-&nbsp;Installing&nbsp;twig/twig&nbsp;(v1.12.2)\r\n&nbsp;&nbsp;&nbsp;&nbsp;Downloading:&nbsp;100%\r\n\r\nWriting&nbsp;lock&nbsp;file&nbsp;&nbsp;\r\nGenerating&nbsp;autoload&nbsp;files&nbsp;&nbsp;\r\nMemory&nbsp;usage:&nbsp;10.13MB&nbsp;(peak:&nbsp;12.65MB),&nbsp;time:&nbsp;4.71s\r\n\r\n$&nbsp;rm&nbsp;-rf&nbsp;vendor\r\n\r\n$&nbsp;composer&nbsp;install&nbsp;--profile\r\nLoading&nbsp;composer&nbsp;repositories&nbsp;with&nbsp;package&nbsp;information&nbsp;&nbsp;\r\nInstalling&nbsp;dependencies&nbsp;from&nbsp;lock&nbsp;file&nbsp;&nbsp;\r\n&nbsp;&nbsp;-&nbsp;Installing&nbsp;twig/twig&nbsp;(v1.12.2)\r\n&nbsp;&nbsp;&nbsp;&nbsp;Loading&nbsp;from&nbsp;cache\r\n\r\nGenerating&nbsp;autoload&nbsp;files&nbsp;&nbsp;\r\nMemory&nbsp;usage:&nbsp;4.96MB&nbsp;(peak:&nbsp;5.57MB),&nbsp;time:&nbsp;0.45s</pre><p>这里，<code>twig/twig:1.12.2</code>的压缩包被保存在<code>~/.composer/cache/files/twig/twig/1.12.2.0-v1.12.2.zip</code>。重新安装包时直接使用。</p><h2>5. 若要修改，源代码优先</h2><p>当你需要修改库的时候，克隆源代码就比下载包方便了。你可以使用<code>--prefer-source</code>来强制选择克隆源代码。</p><pre>composer&nbsp;update&nbsp;symfony/yaml&nbsp;--prefer-source</pre><p>接下来你可以修改文件：</p><pre>composer&nbsp;status&nbsp;-v&nbsp;&nbsp;\r\nYou&nbsp;have&nbsp;changes&nbsp;in&nbsp;the&nbsp;following&nbsp;dependencies:&nbsp;&nbsp;\r\n/path/to/app/vendor/symfony/yaml/Symfony/Component/Yaml:\r\n&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;Dumper.php</pre><p>当你试图更新一个修改过的库的时候，Composer会提醒你，询问是否放弃修改：</p><pre>$&nbsp;composer&nbsp;update\r\nLoading&nbsp;composer&nbsp;repositories&nbsp;with&nbsp;package&nbsp;information&nbsp;&nbsp;\r\nUpdating&nbsp;dependencies&nbsp;&nbsp;\r\n&nbsp;&nbsp;-&nbsp;Updating&nbsp;symfony/symfony&nbsp;v2.2.0&nbsp;(v2.2.0-&nbsp;=&gt;&nbsp;v2.2.0)\r\n&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;package&nbsp;has&nbsp;modified&nbsp;files:\r\n&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;Dumper.php\r\n&nbsp;&nbsp;&nbsp;&nbsp;Discard&nbsp;changes&nbsp;[y,n,v,s,?]?</pre><h2>为生产环境作准备</h2><p>最后提醒一下，在部署代码到生产环境的时候，别忘了优化一下自动加载：</p><pre>composer&nbsp;dump-autoload&nbsp;--optimize</pre><p>安装包的时候可以同样使用<code>--optimize-autoloader</code>。不加这一选项，你可能会发现20%到25%的性能损失。</p><p><br/></p>', 1489666374, 1503365045, 470, 1, 'composer,php', 'Composer 是新一代的PHP依赖管理工具。本文介绍使用Composer的五个小技巧，希望能给你的PHP开发带来方便。', 'upload/thumbimg/9a5891b3989cc0cbdc826c7266013fc2.png', 1),
(30, 'Laravel在虚拟主机使用Rewrite重定向', '<p>Laravel 在虚拟主机中使用 Rewrite 重定向至 Public 目录，同样适用于部分其他框架。</p><p>.htaccess 文件代码如下 ：</p><pre class="brush:html;toolbar:false">&lt;IfModule&nbsp;mod_rewrite.c&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;IfModule&nbsp;mod_negotiation.c&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;Options&nbsp;-MultiViews\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/IfModule&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteEngine&nbsp;On\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;#直接访问域名而没有参数的情况下直接重写到入口文件\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteCond&nbsp;%{REQUEST_URI}&nbsp;^.?$\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteRule&nbsp;^(.*)$&nbsp;/public/index.php&nbsp;[L]\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;#如果public目录下存在请求目录或文件，重写请求到实际目录\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteCond&nbsp;%{DOCUMENT_ROOT}/public%{REQUEST_URI}&nbsp;-d&nbsp;[OR]\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteCond&nbsp;%{DOCUMENT_ROOT}/public%{REQUEST_URI}&nbsp;-f\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteRule&nbsp;^(.*)$&nbsp;/public/$1&nbsp;[L]\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;#请求不存在的目录或文件的情况下重写到入口文件\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteCond&nbsp;%{REQUEST_FILENAME}&nbsp;!-d\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteCond&nbsp;%{REQUEST_FILENAME}&nbsp;!-f\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteRule&nbsp;^&nbsp;/public/index.php&nbsp;[L]\r\n&lt;/IfModule&gt;</pre><p><br/></p>', 1489826221, 1503270715, 165, 1, 'laravel', 'Laravel 在虚拟主机中使用 Rewrite 重定向至 Public 目录，同样适用于部分其他框架。', 'upload/thumbimg/efea3c94f2c5ede02e25267fd8eb1e4b.png', 3),
(31, '通过pecl快速安装php-memcached扩展', '<div><span style="color: rgb(51, 51, 51); font-family: &#39;Microsoft YaHei&#39;, 微軟正黑體, 微软雅黑, &#39;Microsoft JhengHei&#39;, &#39;Segoe ui light&#39;, Trebuchet, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Grande&#39;, &#39;Lucida Sans&#39;, Arial; font-size: 14px; line-height: 24px;"><strong>系统环境：CentOS-7.1</strong></span></div><div><span style="color: rgb(51, 51, 51); font-family: &#39;Microsoft YaHei&#39;, 微軟正黑體, 微软雅黑, &#39;Microsoft JhengHei&#39;, &#39;Segoe ui light&#39;, Trebuchet, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Grande&#39;, &#39;Lucida Sans&#39;, Arial; font-size: 14px; line-height: 24px;"><br/></span></div><div><p style="margin-top: 0px; margin-bottom: 14px; outline: none; line-height: 24px; color: rgb(51, 51, 51); font-family: &#39;Microsoft YaHei&#39;, 微軟正黑體, 微软雅黑, &#39;Microsoft JhengHei&#39;, &#39;Segoe ui light&#39;, Trebuchet, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Grande&#39;, &#39;Lucida Sans&#39;, Arial; font-size: 14px;"><strong>1、安装 libmemcached</strong></p><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; font-family: &#39;Courier New&#39;, Courier, monospace; line-height: 24px;">#&nbsp;yum&nbsp;-y&nbsp;install&nbsp;libmemcached-develLoaded&nbsp;plugins:&nbsp;langpacks\r\nResolving&nbsp;Dependencies\r\n--&gt;&nbsp;Running&nbsp;transaction&nbsp;check\r\n---&gt;&nbsp;Package&nbsp;libmemcached-devel.x86_64&nbsp;0:1.0.16-3.el7&nbsp;will&nbsp;be&nbsp;installed\r\n--&gt;&nbsp;Processing&nbsp;Dependency:&nbsp;cyrus-sasl-devel(x86-64)&nbsp;for&nbsp;package:&nbsp;libmemcached-devel-1.0.16-3.el7.x86_64\r\n--&gt;&nbsp;Running&nbsp;transaction&nbsp;check\r\n---&gt;&nbsp;Package&nbsp;cyrus-sasl-devel.x86_64&nbsp;0:2.1.26-17.el7&nbsp;will&nbsp;be&nbsp;installed\r\n--&gt;&nbsp;Processing&nbsp;Dependency:&nbsp;cyrus-sasl(x86-64)&nbsp;=&nbsp;2.1.26-17.el7&nbsp;for&nbsp;package:&nbsp;cyrus-sasl-devel-2.1.26-17.el7.x86_64\r\n--&gt;&nbsp;Running&nbsp;transaction&nbsp;check\r\n---&gt;&nbsp;Package&nbsp;cyrus-sasl.x86_64&nbsp;0:2.1.26-17.el7&nbsp;will&nbsp;be&nbsp;installed\r\n…………省略若干行…………\r\nInstalled:\r\n&nbsp;&nbsp;libmemcached-devel.x86_64&nbsp;0:1.0.16-3.el7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\nDependency&nbsp;Installed:\r\n&nbsp;&nbsp;cyrus-sasl.x86_64&nbsp;0:2.1.26-17.el7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyrus-sasl-devel.x86_64&nbsp;0:2.1.26-17.el7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\nComplete!</pre><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; font-family: &#39;Courier New&#39;, Courier, monospace; color: rgb(51, 51, 51); line-height: 24px;"><code style="font-family: &#39;Courier New&#39;, Courier, monospace;"><span style="font-size:10px"><br/></span></code></pre><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; font-family: &#39;Courier New&#39;, Courier, monospace; line-height: 24px;"><code style="font-family: &#39;Courier New&#39;, Courier, monospace;"><p style="color: rgb(51, 51, 51); margin-top: 0px; margin-bottom: 14px; outline: none; line-height: 24px; font-family: &#39;Microsoft YaHei&#39;, 微軟正黑體, 微软雅黑, &#39;Microsoft JhengHei&#39;, &#39;Segoe ui light&#39;, Trebuchet, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Grande&#39;, &#39;Lucida Sans&#39;, Arial; font-size: 14px; white-space: normal;"><strong>2、安装 php-memcached 扩展</strong></p><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; font-family: &#39;Courier New&#39;, Courier, monospace; line-height: 24px;">#&nbsp;pecl&nbsp;install&nbsp;memcachedWARNING:&nbsp;channel&nbsp;&quot;pecl.php.net&quot;&nbsp;has&nbsp;updated&nbsp;its&nbsp;protocols,&nbsp;use&nbsp;&quot;pecl&nbsp;channel-update&nbsp;pecl.php.net&quot;&nbsp;to&nbsp;update\r\ndownloading&nbsp;memcached-2.2.0.tgz&nbsp;...\r\nStarting&nbsp;to&nbsp;download&nbsp;memcached-2.2.0.tgz&nbsp;(70,449&nbsp;bytes)\r\n.................done:&nbsp;70,449&nbsp;bytes\r\n15&nbsp;source&nbsp;files,&nbsp;building\r\nrunning:&nbsp;phpize\r\nConfiguring&nbsp;for:\r\nPHP&nbsp;Api&nbsp;Version:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20100412\r\nZend&nbsp;Module&nbsp;Api&nbsp;No:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20100525\r\nZend&nbsp;Extension&nbsp;Api&nbsp;No:&nbsp;&nbsp;&nbsp;220100525\r\nlibmemcached&nbsp;directory&nbsp;[no]&nbsp;:&nbsp;/usr\r\nbuilding&nbsp;in&nbsp;/var/tmp/pear-build-rootb7OPED/memcached-2.2.0\r\nrunning:&nbsp;/var/tmp/memcached/configure&nbsp;--with-libmemcached-dir=/usr&nbsp;&nbsp;\r\n…………省略若干行…………\r\nBuild&nbsp;process&nbsp;completed&nbsp;successfully\r\nInstalling&nbsp;&#39;/usr/lib64/php/modules/memcached.so&#39;\r\ninstall&nbsp;ok:&nbsp;channel://pecl.php.net/memcached-2.2.0\r\nconfiguration&nbsp;option&nbsp;&quot;php_ini&quot;&nbsp;is&nbsp;not&nbsp;set&nbsp;to&nbsp;php.ini&nbsp;location\r\nYou&nbsp;should&nbsp;add&nbsp;&quot;extension=memcached.so&quot;&nbsp;to&nbsp;php.ini</pre><pre style="color: rgb(51, 51, 51); margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; font-family: &#39;Courier New&#39;, Courier, monospace; line-height: 24px;"><code style="font-family: &#39;Courier New&#39;, Courier, monospace;"><span style="font-size:10px"><br/></span></code></pre><p style="color: rgb(51, 51, 51); margin-top: 0px; margin-bottom: 14px; outline: none; line-height: 24px; font-family: &#39;Microsoft YaHei&#39;, 微軟正黑體, 微软雅黑, &#39;Microsoft JhengHei&#39;, &#39;Segoe ui light&#39;, Trebuchet, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Grande&#39;, &#39;Lucida Sans&#39;, Arial; font-size: 14px; white-space: normal;"><strong>3 、追加模块到 php.ini 文件</strong></p><pre style="color: rgb(51, 51, 51); margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: 14px; line-height: 24px;">#&nbsp;extension=memcached.so</pre><pre style="color: rgb(51, 51, 51); margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: 14px; line-height: 24px;"><code style="font-family: &#39;Courier New&#39;, Courier, monospace;"><br/></code></pre><pre style="color: rgb(51, 51, 51); margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: 14px; line-height: 24px;"><code style="font-family: &#39;Courier New&#39;, Courier, monospace;"><br/></code></pre><p style="margin-top: 0px; margin-bottom: 14px; outline: none; line-height: 24px; font-family: &#39;Microsoft YaHei&#39;, 微軟正黑體, 微软雅黑, &#39;Microsoft JhengHei&#39;, &#39;Segoe ui light&#39;, Trebuchet, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Grande&#39;, &#39;Lucida Sans&#39;, Arial; font-size: 14px; white-space: normal;"><span style="color:#800000">Tips：若直接使用 pecl install memcached 无法安装成功，可以使用以下方法--</span></p><pre style="color: rgb(51, 51, 51); margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: 14px; line-height: 24px;">#&nbsp;pecl&nbsp;download&nbsp;memcached\r\n#&nbsp;tar&nbsp;zxvf&nbsp;memcached-xxx\r\n#&nbsp;cd&nbsp;memcached-xxx\r\n#&nbsp;phpize\r\n#&nbsp;./configure&nbsp;--with-libmemcached-dir=/xxxx/xxx/xxx</pre></code></pre></div><p><br/></p>', 1490184091, 1503441027, 121, 1, 'php,memcached', '通过 pecl 快速安装 php-memcached 扩展', 'upload/thumbimg/7f0861b1c9c16d89a60d31d55fa07146.png', 1),
(32, 'Mysql外键约束的设置和注意项', '<pre>如果表A的主关键字是表B中的字段，则该字段称为表B的外键，表A称为主表，表B称为从表。\r\n\r\n外键是用来实现参照完整性的，不同的外键约束方式将可以使两张表紧密的结合起来，特别是修改或者删除的级联操作将使得日常的维护工作更加轻松。\r\n\r\n两个表必须是InnoDB表，MyISAM表暂时不支持外键\r\n外键列必须建立了索引，MySQL&nbsp;4.1.2以后的版本在建立外键时会自动创建索引，但如果在较早的版本则需要显示建立；\r\n外键关系的两个表的列必须是数据类型相似，也就是可以相互转换类型的列，比如int和tinyint可以，而int和char则不可以；\r\n\r\n创建外键语法：\r\n\r\n[CONSTRAINT&nbsp;[symbol]]&nbsp;FOREIGN&nbsp;KEY\r\n[index_name]&nbsp;(index_col_name,&nbsp;...)\r\nREFERENCES&nbsp;tbl_name&nbsp;(index_col_name,...)\r\n[ON&nbsp;DELETE&nbsp;reference_option]\r\n[ON&nbsp;UPDATE&nbsp;reference_option]\r\n\r\nExample:\r\nALTER&nbsp;TABLE&nbsp;`article`&nbsp;ADD&nbsp;CONSTRAINT&nbsp;`fk_1`&nbsp;FOREIGN&nbsp;KEY&nbsp;(`category_id`)&nbsp;REFERENCES&nbsp;`category`&nbsp;(`id`);\r\n&nbsp;\r\nreference_option:\r\nRESTRICT&nbsp;|&nbsp;CASCADE&nbsp;|&nbsp;SET&nbsp;NULL&nbsp;|&nbsp;NO&nbsp;ACTION</pre><pre>1.&nbsp;CASCADE:&nbsp;从父表中删除或更新对应的行，同时自动的删除或更新自表中匹配的行。ON&nbsp;DELETE&nbsp;CANSCADE和ON&nbsp;UPDATE&nbsp;CANSCADE都被InnoDB所支持。&nbsp;&nbsp;\r\n&nbsp;&nbsp;\r\n2.&nbsp;SET&nbsp;NULL:&nbsp;从父表中删除或更新对应的行，同时将子表中的外键列设为空。注意，这些在外键列没有被设为NOT&nbsp;NULL时才有效。\r\n&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ON&nbsp;DELETE&nbsp;SET&nbsp;NULL和ON&nbsp;UPDATE&nbsp;SET&nbsp;SET&nbsp;NULL都被InnoDB所支持。&nbsp;&nbsp;\r\n&nbsp;&nbsp;\r\n3.&nbsp;NO&nbsp;ACTION:&nbsp;InnoDB拒绝删除或者更新父表。&nbsp;&nbsp;\r\n&nbsp;&nbsp;\r\n4.&nbsp;RESTRICT:&nbsp;拒绝删除或者更新父表。指定RESTRICT（或者NO&nbsp;ACTION）和忽略ON&nbsp;DELETE或者ON&nbsp;UPDATE选项的效果是一样的。</pre>', 1490260670, 1503381185, 62, 1, 'mysql', '外键是用来实现参照完整性的，不同的外键约束方式将可以使两张表紧密的结合起来，特别是修改或者删除的级联操作将使得日常的维护工作更加轻松。', 'upload/thumbimg/6983279926e45645631ffd71e8d50fdc.png', 4),
(33, 'LinuxSVN命令详解', '<p>1、将文件checkout到本地目录</p><div><div>svn checkout&nbsp;path（path是服务器上的目录）<br/>&nbsp;&nbsp; 例如：svn checkout svn://192.168.1.1/pro/domain<br/>&nbsp;&nbsp;&nbsp; 简写：svn co</div><p>2、往版本库中添加新的文件</p><div>&nbsp;&nbsp;svn&nbsp;add&nbsp;file<br/>&nbsp;&nbsp; 例如：svn&nbsp;add&nbsp;test.php(添加test.php)<br/>&nbsp;&nbsp; svn&nbsp;add&nbsp;*.php(添加当前目录下所有的php文件)</div><p>3、将改动的文件提交到版本库</p><div><p>&nbsp;&nbsp;svn commit&nbsp;-m&nbsp;&quot;LogMessage&quot;&nbsp;[-N]&nbsp;[--no-unlock]&nbsp;PATH(如果选择了保持锁，就使用--no-unlock开关)<br/>&nbsp;&nbsp; 例如：svn commit -m&nbsp;&quot;add test file for my test&quot;&nbsp;test.php<br/>&nbsp;&nbsp;&nbsp; 简写：svn ci</p></div><p>4、加锁/解锁</p><div>&nbsp;&nbsp;svn lock&nbsp;-m&nbsp;&quot;LockMessage&quot;&nbsp;[--force]&nbsp;PATH<br/>&nbsp;&nbsp; 例如：svn lock -m&nbsp;&quot;lock test file&quot;&nbsp;test.php<br/>svn unlock&nbsp;PATH</div><p>5、更新到某个版本</p><div>&nbsp;&nbsp;svn update -r&nbsp;m path<br/>&nbsp;&nbsp; 例如：<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。<br/>&nbsp;&nbsp;&nbsp;&nbsp; svn update -r&nbsp;200&nbsp;test.php(将版本库中的文件test.php还原到版本200)<br/>&nbsp;&nbsp;&nbsp;&nbsp; svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)<br/>&nbsp;&nbsp; 简写：svn up</div><p>6、查看文件或者目录状态</p><div>&nbsp;&nbsp;1）svn status&nbsp;path（目录下的文件和子目录的状态，正常状态不显示）<br/>&nbsp;&nbsp; 【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】<br/>&nbsp;&nbsp;2）svn status -v&nbsp;path(显示文件和子目录状态)<br/>&nbsp;&nbsp; 第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。<br/>&nbsp;&nbsp; 注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。<br/>简写：svn st</div><p>7、删除文件</p><div>&nbsp;&nbsp;svn delete&nbsp;path -m&nbsp;&quot;delete test fle&quot;<br/>&nbsp;&nbsp; 例如：svn delete svn://192.168.1.1/pro/domain/test.php -m&nbsp;&quot;delete test file&quot;<br/>&nbsp;&nbsp;&nbsp; 或者直接svn delete test.php 然后再svn ci -m &#39;delete test file‘，推荐使用这种<br/>简写：svn (del, remove, rm)</div><p>8、查看日志</p><div>&nbsp;&nbsp;svn log&nbsp;path<br/>&nbsp;&nbsp; 例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化</div><p>9、查看文件详细信息</p><div>&nbsp;&nbsp;svn info&nbsp;path<br/>&nbsp;&nbsp; 例如：svn info test.php</div><p>10、比较差异</p><div>&nbsp;&nbsp;svn diff&nbsp;path(将修改的文件与基础版本比较)<br/>&nbsp;&nbsp; 例如：svn diff test.php<br/>svn diff&nbsp;-r m:n path(对版本m和版本n比较差异)<br/>&nbsp;&nbsp; 例如：svn diff -r 200:201 test.php<br/>&nbsp;&nbsp; 简写：svn di</div><p>11、将两个版本之间的差异合并到当前文件</p><div>&nbsp;&nbsp;svn merge -r&nbsp;m:n path<br/>&nbsp;&nbsp; 例如：svn merge -r&nbsp;200:205&nbsp;test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）</div><p>12、SVN 帮助</p><div>&nbsp;&nbsp;svn help<br/>svn help ci</div><p>------------------------------------------------------------------------------</p><p>以上是常用命令，下面写几个不经常用的</p><p>------------------------------------------------------------------------------</p><p>13、版本库下的文件和目录列表</p><div>&nbsp;&nbsp;svn list&nbsp;path<br/>&nbsp;&nbsp; 显示path目录下的所有属于版本库的文件和目录<br/>简写：svn ls</div><p>14、创建纳入版本控制下的新目录</p><div><p>svn mkdir: 创建纳入版本控制下的新目录。<br/>用法: 1、mkdir PATH...<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2、mkdir URL...<br/>创建版本控制的目录。<br/>1、每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增<br/>&nbsp;&nbsp;&nbsp;&nbsp; 调度，以待下一次的提交。<br/>2、每个以URL指定的目录，都会透过立即提交于仓库中创建。<br/>在这两个情况下，所有的中间目录都必须事先存在。</p></div><p>15、恢复本地修改</p><div><p>svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert:<br/>用法: revert PATH...<br/>注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 被删除的目录</p></div><p>16、代码库URL变更</p><div><p>svn switch (sw):&nbsp;更新工作副本至不同的URL。<br/>用法: 1、switch URL [PATH]<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2、switch --relocate FROM TO [PATH...]</p><p>1、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将<br/>&nbsp;&nbsp;&nbsp;&nbsp; 服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的<br/>&nbsp;&nbsp;&nbsp;&nbsp; 方法。<br/>2、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动&nbsp;<br/>&nbsp;&nbsp;&nbsp; (比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用<br/>&nbsp;&nbsp;&nbsp; 这个命令更新工作副本与仓库的对应关系。</p></div><p>17、解决冲突</p><div><p>svn resolved:&nbsp;移除工作副本的目录或文件的“冲突”状态。<br/>用法: resolved PATH...<br/>注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 相关文件，然后让 PATH 可以再次提交。</p></div><p>18、输出指定文件或URL的内容。</p><div><p>svn&nbsp;cat&nbsp;目标[@版本]...如果指定了版本，将从指定的版本开始查找。<br/>svn cat -r PREV filename &gt; filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的)</p></div></div><p><br/></p>', 1490353487, 1503388833, 46, 1, 'linux,svn', 'LinuxSVN命令详解', 'upload/thumbimg/da7a7b07196cc9b042ccaa84b74fb7ba.png', 2),
(34, 'SVN:ignore的用法（忽略文件及目录）', '<h2 class="title content-title">svn ignore 的用法（忽略文件及目录）<br/></h2><p>若想创建了一个文件夹，并且把它加入<a href="http://lib.csdn.net/base/git" class="replace_word" title="Git知识库" target="_blank" style="color:#df3434; font-weight:bold;">版本控制</a>，但忽略文件夹中的所有文件的内容：</p><p>$ svn mkdir spool <br/>$ svn propset svn:ignore &#39;*&#39; spool <br/>$ svn ci -m &#39;Adding &quot;spool&quot; and ignoring its contents.&#39;</p><p>若想创建一个文件夹，但不加入版本控制，即忽略这个文件夹：</p><p>$ mkdir spool <br/>$ svn propset svn:ignore &#39;spool&#39; . <br/>$ svn ci -m &#39;Ignoring a directory called &quot;spool&quot;.&#39;</p><p>若已经创建了文件夹，并加入了版本控制，现在想忽略这个文件夹，但要保持文件夹的内容：</p><p>$ svn export spool spool-tmp <br/>$ svn rm spool <br/>$ svn ci -m &#39;Removing inadvertently added directory &quot;spool&quot;.&#39; <br/>$ mv spool-tmp spool <br/>$ svn propset svn:ignore &#39;spool&#39; . <br/></p><p>$ svn ci -m &#39;Ignoring a directory called &quot;spool&quot;.&#39;</p><p><br/></p><p>如果想在SVN提交时，忽略某个文件，也就是某个文件不提交，可以使用</p><p>svn propedit svn:ignore命令。</p><p>下面详细介绍一下使用步骤。</p><p>单纯的看svn官方文档和一些网上搜索的资料，有时候真的不如亲自试验的好。</p><p>svn propedit svn:ignore 目录名称。</p><p>注意，在使用这个SVN的属性编辑前，你得确保后面的“目录名称”是SVN版本控制的目录。</p><p>如果要忽略此目录下的文件，可以如下操作。</p><p>比如，想忽略/product目录下的test.<a href="http://lib.csdn.net/base/php" class="replace_word" title="PHP知识库" target="_blank" style="color:#df3434; font-weight:bold;">PHP</a>文件。前提是/product目录必须在svn版本控制下，而test.php文件不在svn版本控制。</p><p>svn st先看一下状态，会显示如下：</p><p>?&nbsp;&nbsp;&nbsp;&nbsp; /product/test.php</p><p>我们需要将test.php文件加入忽略列表。</p><p>此时先设置SVN默认的编辑器</p><p>export&nbsp;SVN_EDITOR=vim</p><p>然后，使用svn propedit svn:ignore ,用法如下</p><p>svn propedit svn:ignore /product</p><p>此时会出现一个VIM的编辑窗口，表示需要将某个文件加入到忽略列表里</p><p>我们在编辑窗口中，写入</p><p>test.php</p><p>然后保存，并退出VIM编辑器。</p><p>这时候会有一个提示：属性 “svn:ignore” 于 “product” 被设为新值。</p><p>表示文件test.php的svn:ignore属性设置成功。</p><p>然后使用svn st查看，会显示：</p><p>M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; product</p><p>我们需要提交，然后这个svn:ignore属性才会起作用</p><p>svn ci -m &#39;忽略test.php文件&#39;</p><p>这时候，无论你如何修改test.php文件，再使用svn st时，也不会出现修改提示符合M了。</p><p><br/></p>', 1490607419, 1502748210, 148, 1, 'svn,linux', '在SVN版本控制中，常常需要将文件或者文件夹脱离控制，例如：Temp、Cache等，就涉及到这篇SVN:ignore的用法。', 'upload/thumbimg/a45df997d421a8b4209787212a7c0598.png', 1),
(35, '用composer自动加载自定义的函数库与类库', '<p>composer的出现真是让人们眼前一亮，web开发从此变成了一件很『好玩』的事情，开发一个CMS就像在搭积木，从packagist中取出『积木』搭建在自己的代码中，一点一点搭建出一个属于自己的王国。<br/>从此以后我基本就抛弃了require和include函数，一个项目中，这两个函数只可能出现一次，那就是<code>require &#39;../vendor/autoload.php&#39;</code>。<br/>那么，既然抛弃了传统的文件包含方法，我们使用所有类库都将用namespace和composer自带的autoload。可是，我们自己编写的函数库与类库，怎么用composer的方法来自动加载呢？</p><p>我们通过修改composer.json来达到目的：</p><p>可以用 classmap 生成支持支持自定义加载的不遵循 PSR-0/4 规范的类库。</p><p>要配置它指向需要的目录，以便能够准确搜索到类文件。</p><pre class="brush:php;toolbar:false">&nbsp;&nbsp;&nbsp;&nbsp;&quot;autoload&quot;:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;classmap&quot;:&nbsp;[\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;database&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;],\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;psr-4&quot;:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;App\\\\&quot;:&nbsp;&quot;app/&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p>如图，Laravel5中将database加载到classmap中。或者：<br/></p><pre class="brush:php;toolbar:false">{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;autoload&quot;:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;classmap&quot;:&nbsp;[&quot;src/&quot;,&nbsp;&quot;lib/&quot;,&nbsp;&quot;Something.php&quot;]\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>如果你想要明确的指定，在每次请求时都要载入某些文件，那么你可以使用 &#39;files&#39; autoloading。通常作为函数库的载入方式（而非类库）。</p><pre class="brush:php;toolbar:false">{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;autoload&quot;:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;files&quot;:&nbsp;[&quot;src/MyLibrary/functions.php&quot;]\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>在修改过composer.json后，最好使用composer命令更新一下：</p><pre class="brush:php;toolbar:false">composer&nbsp;dump-autoload</pre><p><br/></p>', 1490698887, 1502358308, 65, 1, 'composer,laravel', 'composer的出现真是让人们眼前一亮，web开发从此变成了一件很『好玩』的事情，开发一个CMS就像在搭积木，从packagist中取出『积木』搭建在自己的代码中，一点一点搭建出一个属于自己的王国。', 'upload/thumbimg/6f4d32ae2255aafcc22be2b01376c8a2.png', 1);
INSERT INTO `blogs` (`id`, `title`, `content`, `created_at`, `updated_at`, `click`, `user_id`, `tags`, `abstract`, `thumb_img`, `cate_id`) VALUES
(36, 'Apache服务器安装与配置（CentOS）', '<p>一、安装Apache程序,一般有三种安装方式：<br/>1.直接网络安装；<br/>2.下载rpm包，上传至服务器进行安装；<br/>3.通过原代码编译安装：<br/>yum -y install httpd<br/>rpm -qa | grep httpd<br/>------------------------------<br/>启动/停止/重新启动/状态<br/>service httpd start<br/>service httpd stop<br/>service httpd restart<br/>service httpd status<br/>pstree | grep httpd //验证服务是否启动，比较少用；<br/>启动时，如果提示如下信息：<br/>正在启动 httpd：httpd: Could not reliably determine the server&#39;s fully qualified domain name, using localhost.localdomain for ServerName<br/>编辑/etc/httpd/conf/httpd.conf<br/>找到如下内容：<br/>#ServerName www.example.com:80<br/>更改为<br/>ServerName localhost:80<br/>再重启一下Apache服务即可；<br/>------------------------------<br/>测试安装配置是否成功<br/>http://ip地址<br/>如果出来：Apache 2 Test Page powered by CentOS 说明就OK了，简单吧；<br/>如果打不开，那应该是iptables的问题；<br/>编辑/etc/sysconfig/iptables<br/>添加如下内容：<br/>-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT<br/>-A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT<br/>然后重启一下iptables服务可；<br/>------------------------------<br/>二基本配置：<br/>1.针对主机环境的设置项目<br/>编辑/etc/httpd/conf/httpd.conf<br/>KeepAlive off<br/>更改为<br/>KeepAlive on<br/>MaxKeepAliveRequests 100<br/>更改为<br/>MaxKeepAliveRequests 500 //为了增进效率则可以改大一点；<br/><br/>StartServers 8<br/>MinSpareServers 5<br/>MaxSpareServers 20<br/>ServerLimit 256<br/>MaxClients 256<br/>MaxRequestsPerChild 4000<br/><br/>StartServers 4<br/>MaxClients 300<br/>MinSpareThreads 25<br/>MaxSpareThreads 75<br/>ThreadsPerChild 25<br/>MaxRequestsPerChild 0<br/>两个执行模块，默认使用prefork模块，如果想使用worker模块编辑如下文件：<br/>/etc/sysconfig/httpd<br/>找下如下内容：<br/>#HTTPD=/usr/sbin/httpd.worker<br/>更改为<br/>HTTPD=/usr/sbin/httpd.worker<br/>然后重启一下apache服务即可；<br/>------------------------------<br/>2.针对中文Big5编码语言<br/>编辑/etc/httpd/conf/httpd.conf<br/>找到如下内容：<br/>AddDefaultCharset UTF-8<br/>更改为<br/>#AddDefaultCharset UTF-8<br/>或者<br/>AddDefaultCharset gb2313 //根据实际情况设置；<br/>找到如下内容：<br/>LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv zh-CN zh-TW<br/>更改为<br/>LanguagePriority zh-CN en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv zh-TW<br/>然后重启一下apache服务即可；<br/>------------------------------<br/>3.针对首页权限相关设置<br/>编辑/etc/httpd/conf/httpd.conf<br/>找到如下内容：<br/>Options Indexes FollowSymLinks<br/>更改为<br/>Options FollowSymLinks MultiViews<br/>然后重启一下apache服务即可；<br/>------------------------------<br/>进阶配置：<br/>&nbsp;<br/><br/>网站IP被别人的域名非法指向了？Apache如何禁止恶意域名指向你的服务器IP：<br/>解决办法一：<br/>新建一个虚拟主机：<br/>&lt;VirtualHost *:80&gt;<br/>ServerName 171.111.158.91 //更改为您自己服务器的IP地址；<br/>&lt;Location /&gt;<br/>Order Allow,Deny<br/>Deny from all<br/>&lt;/Location&gt;<br/>&lt;/VirtualHost&gt;<br/>&nbsp;<br/>解决办法二：<br/>新建第一个虚拟主机（默认没有定义的域名访问到的是第一个虚拟主机的内容）：<br/>&lt;VirtualHost *:80&gt;<br/>DirectoryIndex index.html index.htm index.php<br/>DocumentRoot /var/www/html/test //定义一个空目录，或者在该目录下放一个显示您需要注明的网站页面；<br/>&lt;Directory /var/www/html/test&gt;<br/>ServerName 171.111.158.91 //更改为您自己服务器的IP地址；<br/>//目录同上；<br/>Order allow,deny<br/>allow from all<br/>&lt;/Directory&gt;<br/>&lt;/VirtualHost&gt;<br/>……</p>', 1490764802, 1502769059, 66, 1, 'apache,linux', 'Apache服务器安装与配置', 'images/thumb_default.jpg', 2),
(38, '使用mod_dav_svn访问Subversion仓库', '<p>Subversion的设计包括了一个抽象的网络层，这意味着版本库是可以通过各种服务器进程访问的。理论上来会说，Subversion可以使用无限数量的网络协议来实现，甚至可以直接用perl利用相关的接口来编写自定义协议。但日常中，用得最多的就是svn://协议，和用mod_dav_svn模块通过Apache服务进行访问。<br/>通过HTTP协议访问版本库是Subversion的亮点之一，这种方式具备许多svnserve服务器所没有的特性，使用上更加灵活。<br/><br/>一、关于mod_dav_svn模块<br/>&nbsp;&nbsp;&nbsp; 由于Subversion需要版本化的控制，因此标准的HTTP协议不能满足需求。要让Apache与Subversion协同工作，就要使用WebDAV（Web-based Distributed Authoring and Versiong）Web分布式创作和版本控制协议。WebDAV是HTTP 1.1的扩展，关于WebDAV的规范和工作原理，可以参考IETF RFC 2518。<br/>&nbsp;&nbsp;&nbsp; mod_dav_san模块就是作为Subversion与Apache之间的接口，通过它，Apache就可以访问版本库，并且可以让客户端也使用HTTP的扩展协议WebDAV/DeltaV进行访问。<br/><br/>二、安装和配置<br/>1、准备<br/>与单纯的svnserve不同，要通过Apache访问Subversion，除了必须已经部署好Apache和Subversion的基本环境外，当然不可缺少的是mod_dav_svn模块了：<br/></p><pre class="brush:bash;toolbar:false">$&nbsp;yum&nbsp;install&nbsp;subversion\r\n$&nbsp;yum&nbsp;install&nbsp;mod_dav_svn</pre><p><br/>2、创建版本仓库<br/>这与以前的工作是基本相同的，不同点在于，需要让运行Apache的用户拥有该仓库的所有权：<br/></p><pre class="brush:bash;toolbar:false">#&nbsp;mkdir&nbsp;/var/www/svn\r\n#&nbsp;cd&nbsp;/var/www/svn/\r\n#&nbsp;svnadmin&nbsp;create&nbsp;stuff\r\n#&nbsp;chown&nbsp;-R&nbsp;apache.apache&nbsp;stuff/</pre><p>这样，就创建了一个stuff仓库，并让apache称为该仓库宿主。<br/><br/>3、修改Apache配置<br/>需要激活Apache加载mod_dav_svn模块。<br/>修改/etc/httpd/conf.d/subversion.conf配置文件的内容为：<br/># 加载相应的模块<br/></p><pre class="brush:bash;toolbar:false">LoadModule&nbsp;dav_svn_module&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules/mod_dav_svn.so\r\nLoadModule&nbsp;authz_svn_module&nbsp;&nbsp;&nbsp;modules/mod_authz_svn.so\r\n&lt;Location&nbsp;/repos&gt;\r\n&nbsp;&nbsp;&nbsp;DAV&nbsp;svn\r\n&nbsp;&nbsp;&nbsp;SVNPath&nbsp;/var/www/svn/stuff\r\n&lt;/Location&gt;</pre><p>重新启动httpd服务后，通过浏览器访问http://ip/repos，即可看到如下界面：<br/>点击在新窗口中浏览此图片<br/><br/>4、加入认证信息<br/>上面定义的版本仓库，默认是任何人都可以匿名访问，并且拥有完全的写入、读取、修改、提交、删除版本库中信息的权限。<br/>因此，我们需要加入认证信息以做权限的管理。HTTP协议版本就提供了简单的客户端认证方式，这可通过Apache配置完成。<br/>Apache提供了一个htpasswd工具来管理，使用该工具可以创建一个文件，其中存放着用户名和加密后的密码信息。而这些就是Subversion可以引用的用户了，根据这些用户信息，配合mod_authz_svn模块即可进行目录的访问控制。<br/><br/>a、创建存放用户名信息的文件<br/>用htpasswd命令创建文件：<br/></p><pre class="brush:bash;toolbar:false">#&nbsp;mkdir&nbsp;/etc/svn\r\n#&nbsp;htpasswd&nbsp;-c&nbsp;/etc/svn/svnusers.conf&nbsp;linuxing\r\nNew&nbsp;password:\r\nRe-type&nbsp;new&nbsp;password:\r\nAdding&nbsp;password&nbsp;for&nbsp;user&nbsp;linuxing</pre><p>还可以利用htpasswd添加用户，或修改密码，删除用户名等：<br/></p><pre class="brush:bash;toolbar:false">#&nbsp;htpasswd&nbsp;-m&nbsp;/etc/svn/svnusers.conf&nbsp;NewUserName\r\n#&nbsp;htpasswd&nbsp;-m&nbsp;/etc/svn/svnusers.conf&nbsp;OldUserName\r\n#&nbsp;htpasswd&nbsp;-D&nbsp;/etc/svn/svnusers.conf&nbsp;OldUserName</pre><p>-m 是可选的参数，当用-c创建用户名信息文件后，即可修改或添加用户信息。<br/><br/>b、修改/etc/httpd/conf.d/subversion.conf配置文件<br/>在配置文件的Location标签部分，加入：<br/>引用<br/># 除了下面的动作需要认证外，其他动作不需验证<br/></p><pre class="brush:bash;toolbar:false">&lt;LimitExcept&nbsp;GET&nbsp;PROPFIND&nbsp;OPTIONS&nbsp;REPORT&gt;\r\n&nbsp;&nbsp;AuthType&nbsp;Basic&nbsp;#&nbsp;使用基本认证方式，即用户名、密码认证\r\n&nbsp;&nbsp;AuthName&nbsp;&quot;Authorization&nbsp;Realm&quot;&nbsp;#&nbsp;在认证对话框中出现的提示信息\r\n&nbsp;&nbsp;AuthUserFile&nbsp;/etc/svn/svnusers.conf&nbsp;#&nbsp;指定上面创建好的存放用户名信息的文件路径\r\n&nbsp;&nbsp;Require&nbsp;valid-user&nbsp;#&nbsp;限定只有用户输入正确的用户名和密码后才能访问该标签所指向的路径\r\n&lt;/LimitExcept&gt;</pre><p><br/>该标签定义了，当进行除了指定的若干动作需要进行用户名和密码的认证后才能进行外，其他的动作是不做限制的。例如：只有认证用户可以写操作，同时也允许匿名的读取操作。<br/>也可以使用&lt;Limit &gt;标签对特定的动作进行认证控制，甚至完全不用&lt;Limit &gt;或&lt;LimitExcept &gt;标签，表示对所有的动作进行控制。此外，定义“Require linuxing hanry”的写法，可实现将只有用户信息文件中特定的linuxing和hanry用户才能通过认证。<br/><br/>重启httpd服务后，可使用浏览器或svn客户端对该认证工作进行验证。<br/><img src="/upload/image/20170329/1490769116493255.png" title="1490769116493255.png" alt="图片.png"/></p><p><img src="/upload/image/20170329/1490769131489196.png" title="1490769131489196.png" alt="图片.png"/><br/></p><p>验证失败，会提示：<br/><img src="/upload/image/20170329/1490769140635131.png" title="1490769140635131.png" alt="图片.png"/><br/></p><p><br/></p><p>5、进行目录访问控制<br/>上面配置只能对Location标签内的路径执行某些动作时进行控制，若希望控制版本仓库中目录访问权限，需要利用mod_authz_svn模块。在上面的subversion.conf中，我们已经激活了该模块。<br/>所以，接下来要做的，就是在Location标签中使用authz功能：<br/>引用<br/></p><pre class="brush:bash;toolbar:false">AuthzSVNAccessFile&nbsp;/etc/svn/accesspolicy.conf</pre><p>其中，AuthzSVNAccessFile 指向的就是svnserve服务时使用的权限配置文件。每一段命名一个版本库和里面的路径，使用“认证用户（组）=权限”的方式描述每个用户（组）访问版本库的级别：r 是只读，rw是可读写，留空是不允许访问。另外，*表示所有用户，可以用于控制匿名用户的访问权限；@表示已经被分组的组名。<br/></p><pre class="brush:bash;toolbar:false">#&nbsp;cat&nbsp;/etc/svn/accesspolicy.conf\r\n[groups]\r\ncommitters&nbsp;=&nbsp;paul,linuxing\r\ndevelopers&nbsp;=&nbsp;linuxing,hanry\r\n\r\n[/]\r\n*&nbsp;=&nbsp;r&nbsp;#&nbsp;用于控制匿名用户的\r\n@committers&nbsp;=&nbsp;rw\r\n\r\n[/dev]\r\n@developers&nbsp;=&nbsp;rw\r\n\r\n[/private]\r\n*&nbsp;=\r\n@comitters&nbsp;=&nbsp;r</pre><p>这里定义了两个组，并对版本库中的特定路径给予了访问权限的控制。<br/>加入AuthzSVNAccessFile选项后，需要重启httpd服务以让其生效。但权限控制文件的内容修改后马上生效，是不需重启httpd服务。<br/>※ 更详细的说明，还可参考前面的日志：[原]使用Subversion的svn协议访问<br/><br/>三、注意事项<br/>1、如果你有多个版本仓库，怎么办？<br/>这时，可以使用多个Location，通过SVNPath来分别指定其路径；或者，参考配置文件中提供的，用SVNParentPath指定一个总路径，例如：<br/></p><pre class="brush:bash;toolbar:false">SVNParentPath&nbsp;/var/www/svn</pre><p>但是，你务必需要给该总路径适当的宿主权限：<br/></p><pre class="brush:bash;toolbar:false">#&nbsp;chown&nbsp;-R&nbsp;apache.apache&nbsp;/var/www/svn</pre><p>否则，访问时会提示权限不足的错误。接着，你就可以使用浏览器访问http://ip/repos/stuff等每个单独的版本库了。（每个单独的版本库，其Revision信息是独立的）<br/><br/>◎ 还需要留意两点：<br/>a、虽然使用SVNParentPath指定了总路径，而且用浏览器去访问http://ip/repos可能会看到一些浏览信息。但如果总路径并没有加入到版本仓库中管理（即没有.svn目录下的文件），则通过svn客户端去访问版本仓库时，应通过实际仓库的路径去访问，如：http://ip/repos/stuff ；<br/>b、使用mod_dav_svn模块，通过Apache访问版本仓库，是不需要启动svnserve服务的，一切都已经由dav模块做接口完成数据请求的工作，通过svn客户端以HTTP协议访问版本仓库即可。<br/><br/>2、能否通过一个权限配置文件对每个版本库进行访问权限？<br/>Subversion提供版本库分支管理功能。因此，在svnserve服务，或使用mod_dav_svn模块，使用Apache访问Subversion版本库时，当定义权限配置文件中，是可以对每个版本库进行权限控制的。<br/>以mod_dav_svn方式为例，像上面提到的SVNParentPath来指定版本库的总路径，如：<br/>引用<br/></p><pre class="brush:bash;toolbar:false">SVNParentPath&nbsp;=&nbsp;/var/www/svn</pre><p>而实际上，真正的版本库是/var/www/svn下面的一些子目录，例如/var/www/svn/project1、/var/www/svn/project2，它们才是由svnadmin create创建的版本仓库。<br/>这时，可以在权限配置文件中，使用[repository:/path]的方式定义权限：<br/></p><pre class="brush:bash;toolbar:false">[project1:/]\r\n*&nbsp;=&nbsp;r\r\n@project1_committer&nbsp;=rw\r\n\r\n[project2:/]\r\n*&nbsp;=&nbsp;r\r\n@project2_committer&nbsp;=rw</pre><p><br/>3、Apache与svn权限控制该用哪个？<br/>根据上面的描述，可以在Apache中使用&lt;Limit&gt;等标签进行权限控制，也可以激活mod_authz_svn模块后，使用svnauthz格式的权限文件来控制。那该如何选择呢？<br/>事实上，它们的区别在于权限的管理者不同，对于浏览器或svn客户端来说，除了Linux文件系统本身的访问权限外，&lt;Limit&gt;方式是让Apache根据发送的命令进行访问管理，svnauthz则是由mod_authz_svn来进行，它们没有本质的区别，都可以用。<br/>但由于对命令的控制比较复杂，而且容易导致误操作，因此，我更建议使用svnauthz的方式管理访问权限：<br/>引用<br/></p><pre class="brush:bash;toolbar:false">&lt;Location&nbsp;/repos&gt;\r\n&nbsp;&nbsp;&nbsp;DAV&nbsp;svn\r\n&nbsp;&nbsp;&nbsp;SVNParentPath&nbsp;/var/www/svn\r\n&nbsp;&nbsp;&nbsp;Satisfy&nbsp;Any\r\n&nbsp;&nbsp;&nbsp;AuthType&nbsp;Basic\r\n&nbsp;&nbsp;&nbsp;AuthName&nbsp;&quot;Authorization&nbsp;Realm&quot;\r\n&nbsp;&nbsp;&nbsp;AuthUserFile&nbsp;/etc/svn/svnusers.conf\r\n&nbsp;&nbsp;&nbsp;Require&nbsp;valid-user\r\n&nbsp;&nbsp;&nbsp;AuthzSVNAccessFile&nbsp;/etc/svn/accesspolicy.conf\r\n&lt;/Location&gt;</pre><p>这里的/etc/httpd/conf.d/subversion.conf文件中，不需要加入&lt;Limit&gt;或&lt;LimitExcept&gt;标签。但加入了Satisfy Any的设置，其表示在同时启用了Allow（允许）和Require的情况下，指定相关策略的，一共有两个备选值，All表示用户必须同时满足Allow和Require的条件，而Any则是满足其中之一即可。<br/>这这里，Satisfy Any用于允许先用匿名方式尝试访问，并根据svnauthz对匿名用户的控制给予访问权限。若没有这句话，则无论svnauthz中是否加入了“*=r”的写法，匿名用户都是无法访问的。<br/><br/>4、svn协议与mod_authz_svn模块<br/>svn协议，用于客户端使用svn://方式访问版本库，而mod_authz_svn模块让客户端可通过Apache访问版本库，它们分别使用不同的服务：svnserve、httpd进行访问。由于用户、组权限不同，权限管理方式也不相同，因此，不建议同时启动两种访问方式。<br/>而易用性，管理方便的角度来分析，Apache以mod_authz_svn模块的方式访问版本库会更多人选择。</p><p>（mod_authz_svn方式，使用80端口访问，并且提供https等加密传输，用于用户信息验证的密码保存方式不是明文的）<br/></p>', 1490769233, 1502865906, 69, 1, 'svn,linux', 'Subversion的设计包括了一个抽象的网络层，这意味着版本库是可以通过各种服务器进程访问的。理论上来会说，Subversion可以使用无限数量的网络协议来实现，甚至可以直接用perl利用相关的接口来编写自定义协议。但日常中，用得最多的就是svn://协议，和用mod_dav_svn模块通过Apache服务进行访问。通过HTTP协议访问版本库是Subversion的亮点之一，这种方式具备许多svnserve服务器所没有的特性，使用上更加灵活。', 'images/thumb_default.jpg', 2),
(39, '远程连接Mysql数据库超时与权限不足问题', '<p>查看Mysql用户权限：</p><p><img src="/upload/image/20170331/1490949773643920.jpg" title="1490949773643920.jpg" alt="QQ截图20170331162628.jpg"/></p><p>在不修改root前提下，新建用户并赋予全局或者指定数据库权限，设置主机为%，即可从外部使用数据库。</p><p>如需指定特定操作和地址，可以使用如下命令：</p><pre class="brush:bash;toolbar:false">grant&nbsp;select,&nbsp;insert,&nbsp;update,&nbsp;delete&nbsp;on&nbsp;testdb.*&nbsp;to&nbsp;common_user@’192.168.0.%’</pre><p><img src="/upload/image/20170331/1490949777724914.jpg" title="1490949777724914.jpg" alt="QQ截图20170331162343.jpg"/></p><p>之前Mysql数据库放在win10平台，发现内网中其他主机始终无法连接，帐号权限已有，想想是否是防火墙问题，于是设置：</p><p>在win10防火墙设置中，新增入站规则——端口——3306，果然成功。</p><p><br/></p>', 1490949269, 1502596462, 57, 1, 'mysql', NULL, 'images/thumb_default.jpg', 4),
(40, 'Jquery.scroll方法实现上拉下拉加载刷新', '<p>这里是用Jquery的内置方法scroll简单实现上下拉刷新内容。</p><p>直接上代码：</p><pre class="brush:js;toolbar:false">$(window).scroll(function()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//$(document).scrollTop()&nbsp;获取垂直滚动的距离\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//$(document).scrollLeft()&nbsp;这是获取水平滚动条的距离\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($(document).scrollTop()&nbsp;&lt;=&nbsp;0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;滚动条已经到达顶部\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($(document).scrollTop()&nbsp;&gt;=&nbsp;$(document).height()&nbsp;-&nbsp;$(window).height())&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;滚动条已经到达底部\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</pre><p>在实际使用中，还会遇到由于判定条件的原因，可能会导致一次动作生成多次运行结果，简单的小技巧避免短时间内重复多次操作。</p><p>在你的反应事件中加入判定条件：</p><pre class="brush:js;toolbar:false">var&nbsp;_time&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;//&nbsp;记录时间戳\r\nfunction(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;time&nbsp;=&nbsp;new&nbsp;Date();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(time-_time&gt;1000){&nbsp;&nbsp;//&nbsp;判断时间戳偏移量\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_time&nbsp;=&nbsp;time;&nbsp;&nbsp;//&nbsp;覆写时间记录\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&#39;post&#39;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url:&#39;{{url(&quot;/blog/pull&quot;)}}&#39;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:{page:_page},\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataType:&#39;json&#39;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).done();</pre><p>此方法可以实现简单的上下拉刷新加载功能，但在个别情形下（尤其是PC屏幕中），当document高度小于window，即网页内容并未超出浏览器宽度时，因为无法制造scroll这一动作，因此该方法会失效。</p><p><em>对于鼠标滚动事件，jQuery mousewheel 插件也是一种思路。以及广泛应用的 isScroll 。<br/></em></p>', 1491195202, 1502445740, 153, 1, 'jquery,js', '用Jquery的scrollTop()判断滚动条到达顶部或底部 ，配合ajax可实现窗口内容的上拉下拉加载刷新。', 'upload/thumbimg/fdb4826c672e96a96b87cd6c2ca10f00.png', 5),
(54, 'Laravel的orderBy()使用小技巧', '<p>Laravel查询中对orderBy做了一些优化简写：<br/></p><p>The <code class=" language-php">latest</code> and <code class=" language-php">oldest</code> methods allow you to easily order results by date. By default, result will be ordered by the <code class=" language-php">created_at</code> column. Or, you may pass the column name that you wish to sort by:</p><pre class="brush:php;toolbar:false">$user&nbsp;=&nbsp;DB::table(&#39;users&#39;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;latest()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;first();</pre><p>The <code class=" language-php">inRandomOrder</code> method may be used to sort the query results randomly. For example, you may use this method to fetch a random user:</p><pre class="brush:php;toolbar:false">$randomUser&nbsp;=&nbsp;DB::table(&#39;users&#39;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;inRandomOrder()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;first();</pre><p><br/></p>', 1491288604, 1503086386, 104, 1, 'laravel,php', 'Laravel查询中对orderBy做了一些优化简写：The latest and oldest methods and the inRandomOrder method.', 'images/thumb_default.jpg', 3),
(55, '我们是怎么做CodeReview的(转)', '<p><span style="font-size: 15px;">前几天看了《Code Review 程序员的寄望与哀伤》，想到我们团队开展Code Review也有2年了，结果还算比较满意，有些经验应该可以和大家一起分享、探讨。<br/></span><span style="font-size: 15px;">我们为什么要推行Code Review呢？我们当时面临着代码混乱、Bug频出的状况。</span><br/><span style="font-size: 15px;">当时我觉得要有所改变，希望能提高产品的代码质量，改善开发团队面临的困境。并且我个人在开发上有很多经验，也希望这些知识能够在团队内传播。</span><br/><span style="font-size: 15px;">各种考虑后，我们最后认为推行Code Review能改善或解决我们面临的很多问题。</span><br/><br/><span style="font-size: 15px;">这篇文章的目的不是告诉大家怎么在一个团队内推行Code Review，首先因为我个人仅在一家公司内推行过，并没有很多经验。</span><br/><span style="font-size: 15px;">其次每家公司、每个团队的情况都不太一样，应该根据公司或团队的实际情况选择恰当的方案，并根据成员的反馈来及时调整，推动Code Review的实施。</span><br/><span style="font-size: 15px;">所以，本文是介绍我们公司是如何实施Code Review的，我们是如何解决我们遇到的问题的，希望我们的经验能给大家带来些帮助。</span><br/><span style="font-size: 15px;">行文仓促，如有遗漏或错误，欢迎指正。</span><span style="font-size: 15px;"><br/><br/></span></p><h1>一、流程和规则</h1><p><span style="font-size: 15px;"><span style="line-height: 1.5;">经过简单的对比、试用，我们最后采用了Git Flow+Pull Request（PR）模式来做Code Review。（PR模式详情可参见&nbsp;</span><a style="font-size: 15px; line-height: 1.5;" href="http://blog.jobbole.com/76854/" target="_blank">Git工作流指南：Pull Request工作流</a><span style="line-height: 1.5;">）</span></span></p><p><span style="font-size: 15px;"><span style="line-height: 1.5;">Pull Request(PR)简单的说就是你没有权限往一个特定的仓库或分支提交代码，你请求有权限的人把你提交的代码从你的仓库或分支合并到指定的仓库或分支。<br/></span><span style="line-height: 1.5;">由于PR需要有权限的人确认，所以非常适合在这个过程中做Code Review，是否接受或者拒绝就取决于Code Review的结果。<br/>在支持PR模式的软件里，每一个PR都有一个新增代码的对比（diff）界面。<br/>代码审核者可以在线浏览请求合并的新增代码，并针对有疑问的代码行添加评论，通过这种方式来实现Code Review。<br/>评论可以被所有有权限查看仓库的人看到，每个人都可以回复任何人的评论，有点像论坛里某个帖子的讨论。<br/></span><span style="line-height: 1.5;">这种模式是事后审核，也就是代码已经提交到了中心仓库，Review过程中频繁的改动会造成历史签入记录的混乱。<br/></span><span style="line-height: 1.5;">当然Git可以采用更改历史记录来解决这个问题，由于容易误操作，我们一般只在基础类库这类要求比较严格的项目上实施。</span></span></p><p><span style="font-size: 15px;">我们所了解到的支持PR模式的软件都采用Git作为源代码版本控制工具，所以我们的源代码版本控制工具也迁移到了Git。</span><br/><span style="font-size: 15px;">由于Git太灵活了，因此诞生了很多的Git流程，用来规范Git的使用。</span><br/><span style="font-size: 15px;">常见的有集中式工作流、功能分支工作流、Gitflow工作流、Forking工作流、Github工作流。<br/>我们对Git Flow做了些调整，调整后的流程被命名为Baza Flow，定义见后文。</span><br/><span style="font-size: 15px;">根据Baza Flow，我们大部分仓库只定义了2个主干分支，master和develop。(例外，我们有一个仓库有3个开发小组同时进行开发，定义了4个主干分支，目前还比较顺畅，再多估计主干分支之间的合并就比较繁琐了。)</span><br/><span style="font-size: 15px;">master对应生产环境代码，所有面向生产环境的发布来源都是master分支的代码。develop则对应本地测试环境的代码。</span><br/><span style="font-size: 15px;">绝大多数情况下，QA（测试）只测试develop分支和master分支的代码。</span></p><p><span style="line-height: 1.5; font-size: 15px;">由于开发人员都在一个团队内，所以我们没有采用基于仓库的PR，采用的是基于分支的PR。<br/>我们对主干分支的操作权限做了限制，只有特定的人才能操作，develop分支是项目开发Leader和架构师，master分支是QA。<br/>有权限往主干分支合并的成员会按照约定的规则来执行合并，不会合并没有完成审核的PR。<br/>上面这点其实蛮重要的，所以我们会对有权限合并的人有特别的约定，在什么情况下才能合并代码。（见后文PR的说明）<br/>PR的发起人要主动的推动PR的审核，Leader也会密切关注PR审核的进度，在需要的时候及时介入。<br/></span></p><p><span style="line-height: 1.5; font-size: 15px;">我们配置了CI服务器（什么是CI）只编译特定的分支，通常是develop和master分支。<br/>所有的代码合并到了主干分支之后，都会自动触发编译和本地测试环境的发布，QA无需依赖开发人员编译的代码来测试，也无需自己手工操作这些，保证了开发人员和测试人员的相互独立。<br/>我们本地测试环境的发布包含了数据库和站点的发布，全自动的，发布完成以后就是一个可用的产品，有时间这部分也可以分享一下。</span></p><p><span style="line-height: 1.5; font-size: 15px;">我们还使用了Scrum里面一个很重要的概念：完成定义。<br/>就是我们规定了我们一个任务的完成被定义为：代码编写完成，经过自测，提交的PR经过审核并且合并到主干分支。<br/>也就是说，所有的代码被合并到了主干分支之后任务才算是完成，而被合并到主干分支必须要经过Code Review，这是强制的。</span></p><p><span style="line-height: 1.5;">&nbsp;</span></p><blockquote><p><span style="font-size: 18px;">Baza Flow</span></p><p><span style="font-size: 15px;">当前版本 V0.9</span></p><p><span style="font-size: 15px;">Baza Flow 由 Git Flow 演化而来，Git Flow的开发模式如下图所示：<br/><img src="http://images2015.cnblogs.com/blog/94928/201607/94928-20160706080812280-1827483538.png" alt=""/><br/></span></p><p><span style="font-size: 15px;">由于我们的托管软件对于Pull Request的限制，我们对Git Flow做了改动，改动的地方有：</span><br/><span style="font-size: 15px;">1、每一个大功能我们会创建一个单独的feature分支，项目开发人员基于这个单独的feature分支创建自己的任务分支。</span><br/><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 比如，对于CS 2项目来说，启动的时候分支的创建是：master -&gt; develop -&gt; feature/v2。</span><br/><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 开发人员应该基于这个大特性分支feature/v2来创建自己的任务分支，比如创建XXXX，可以用一个单独的分支feature/v2-xxxx。</span><br/><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完成这个任务以后，立即向上游分支（feature/v2）提交pull request。然后从feature/v2-xxxx 创建自己的下一个任务分支，比如YYYY编辑 feature/v2-yyyy。</span><br/><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong> 请注意，合并到上游分支的功能必须相对独立而且是可用的，分支任务工作量0.5-1个工作日，不宜超过2个工作日，超过2个工作日不向上游合并，需要向团队解释。</strong></span><br/><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 代码经过Review以后，可能会进行必要的修改，修改在原分支修改，修改完毕代码合并进上游分支，<strong>原分支会定期删除</strong>。<br/>&nbsp; &nbsp; &nbsp; 项目组成员在收到合并成功的通知后，请自行从上游大特性分支向下合并到自己当前的开发分支。</span><br/><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>提交pull request后创建新任务分支的时候务必知会一下相关配合同事（比如前端的同事），让他们在新的分支上继续开发。</strong></span></p><p><span style="font-size: 15px;">2、对于小功能，预计在0.5-1个（不超过2个）工作日工作量的开发任务，直接基于develop分支创建特性分支即可。</span></p><p><span style="font-size: 15px;">3、在各个分支遇到的bug，请基于该分支创建一个Bug分支。</span><br/><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果在缺陷跟踪管理系统上有对应的项，命名请使用缺陷跟踪管理系统的ID，比如BAZABUG-1354&nbsp;比如这个Bug的分支命名就是bugfix/BAZABUG-1354。</span><br/><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果在缺陷跟踪管理系统上没有对应的项，命名请简短的说明修改内容，比如“JX 9df2b01 引用bootstrap css虚拟路径重写，避免出现字体无法找到的问题”，分支命名可以是bugfix/miss-font。</span><br/><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完成修改以后提交并推送到中心仓库然后立即向上游分支提交pull request。</span><br/><span style="font-size: 15px;">4、发起pull request以后，<strong>请将pull request的链接在IM上发给代码审核者</strong>，以此通知对方及时进行审核。</span></p></blockquote><h1><span style="font-size: 15px; line-height: 1.5;"><br/></span><span style="line-height: 1.5;">二、执行</span></h1><p>我们在团队内部提倡质量优先，开发团队不能为了进度牺牲质量，并在团队内部达成了共识。<br/>所以，无论进度有多么紧迫，Code Review的过程都一定会做。<br/>所有的问题一定会被提出，只是会根据进度的紧迫程度，以及问题的大小，改动成本，决定问题是现在解决，还是加一个TODO，并记录在缺陷跟踪管理系统内，以防日后遗忘。<br/>多数情况下，我们都会要求立即解决，哪怕因此造成了发布的推迟。<br/>我们深知，其实多数情况下，现在不解决，日后不知道猴年马月才能解决。</p><p><span style="font-size: 15px; line-height: 1.5;">我们在团队内推行Code Review的过程中没有遇到太多阻力。<br/>原因大概有两点，首先管理层方面了解之前遇到的各种问题，也迫切希望能有所改善，所以从一开始就是支持的态度。<br/>其次，绝大部分开发人员觉得在这个过程中能自己能学习到东西，并没有抵触，遇到很好的意见时大家都还是很高兴的。<br/>最后，慢慢的形成了一种氛围，整个团队都会自觉的维护它。<br/>附一张我们审核的对话图，这位童鞋尝试对系统内部散落各地发业务邮件的代码做一个整理，用一套模式来处理，调整了3版才定调，然后修改了很多细节才通过了合并，前后大概用一个多星期时间：<br/><img src="http://images2015.cnblogs.com/blog/94928/201607/94928-20160707212009389-996223073.jpg" alt=""/><br/></span></p><p><span style="font-size: 15px; line-height: 1.5;">表面上看来Code Review会延缓项目的进度，但是在我们2年多的执行过程中，大多数时候没感觉到有延缓。<br/>原因是，虽然代码合并的周期变长了，但是由于代码质量提高了，导致Bug变少了，由于Bug引起的返工问题也变少了，因此整体的进度其实并没有延缓。<br/>我个人认为对一个成熟的团队其实做Code Review反而会加快整体的项目进度，但是手头上没有统计数据支撑我的观点。（对于软件开发的度量，欢迎有心得的同学告知我）</span></p><p><span style="font-size: 15px; line-height: 1.5;">我们每个分支有权限合并的人都不止一个，这样可以保证有人请假不在的时候，代码仍然可以被其他同事审核通过之后合并。</span></p><p><span style="font-size: 15px; line-height: 1.5;">半年前，我们团队加入了很多新成员，刚加入的新同事对规范、项目、产品的熟悉程度都不高，导致了有一段时间，我们遇到了PR审核周期变长的问题。<br/>加上之前遇到的一些问题，我们总结了一个说明，目的是减轻Code Review对开发人员工作的负担，加快PR审核通过的过程。<br/></span><span style="font-size: 15px;">说明如下：</span>&nbsp;</p><blockquote><p><span style="font-size: 18px;">Pull Request 的说明</span>&nbsp;</p><p><span style="font-size: 15px;">任务完成才能提交PR。</span><br/><span style="font-size: 15px;">PR应该在一个工作日内被合并或者被拒绝。</span><br/><span style="font-size: 15px;">PR在有严重问题（包括但不限于架构问题、安全问题、设计问题），太多问题，或者任务无效的情况下会被拒绝。</span><br/><span style="font-size: 15px;">严禁一个PR里面有多个任务，除非它们是紧密关联的。</span><br/><span style="font-size: 15px;">PR提交之后只允许针对Review发现问题再次提交代码，除非有充足的理由，严禁在同一个PR中再次提交其它任务的代码。&nbsp;</span></p><p><span style="font-size: 15px;">提交PR时候有一个描述框，内容会自动根据Commit的message合并而成。</span><br/><span style="font-size: 15px;">切记，如果一次提交的内容包含很多Commit，请不要使用自动生成的描述。</span><br/><span style="font-size: 15px;">请用简短但是足够说明问题的语言（理想是控制在3句话之内）来描述：&nbsp;</span></p><h3><span style="font-size: 15px;">你改动了什么，解决了什么问题，需要代码审查的人留意那些影响比较大的改动。</span><br/><span style="font-size: 15px;">特别需要留意，如果对基础、公共的组件进行了改动，一定要另起一行特别说明。</span></h3><p><span style="font-size: 15px;">&nbsp;审核人员邀请原则：&nbsp;</span></p><p><span style="font-size: 15px;">1.&nbsp;在创建PR时，Reviewers（审核人）一栏里主要填写“必需审核人”。只有这些人审核都通过，才允许合并。</span><br/><span style="font-size: 15px;">2.&nbsp;除了“必需审核人”外，还有一些其它审核人，我们可以在Description里做为“邀请审核嘉宾”@进来。</span><br/><span style="font-size: 15px;">3.&nbsp;主干分支间的合并，如Develop&nbsp;=&gt;&nbsp;Master，或Master&nbsp;=&gt;&nbsp;Develop等，则需要把整个团队（开发+QA）都列为“必需审核人”。&nbsp;</span></p><p><span style="font-size: 15px;">必须审核人的列表由团队决定，可能包括以下人选：&nbsp;</span></p><ul><li><span style="font-size: 15px;">团队Leader</span></li><li><span style="font-size: 15px;">前端架构师（如果有前端代码改动） （可以授权）</span></li><li><span style="font-size: 15px;">后端架构师（如果有后端代码改动） （可以授权）</span></li><li><span style="font-size: 15px;">产品架构师</span></li><li><span style="font-size: 15px;">对此PR解决的问题比较熟悉的（之前一直负责这部分业务的同事）</span></li><li><span style="font-size: 15px;">此PR解决的问题对他影响比较大（比如认领的任务依赖此PR的同事）</span></li></ul><p><span style="font-size: 15px;">&nbsp;其它审核人，包括但不限于：&nbsp;</span></p><p><span style="font-size: 15px;">需要知悉此处代码改动的人但又不必非要其审核通过的同事</span><br/><span style="font-size: 15px;">可以从这个PR中学习的同事&nbsp;</span></p><p><span style="font-size: 15px;">可以授权指的是，根据约定，Bug修复之类的改动，或者影响较小的改动，前端架构师和后端架构师可以授权团队内的某个资深开发人员，由这个资深开发人员代表他们进行审核。</span><br/><span style="font-size: 15px;">主干分支之间的合并，大型Feature的合并，前端架构师和后端架构师需要参与。&nbsp;</span></p><p><span style="font-size: 15px;">上述审核人关注的视角不太一样：</span><br/><span style="font-size: 15px;">团队Leader关注你是否完成了任务，前后端架构师关注是否符合公司统一的架构、风格、质量，产品架构师从整个产品层面来关注这个PR。</span><br/><span style="font-size: 15px;">熟悉此问题的同事可以更好的保证问题被解决，确保没有引入新问题。</span><br/><span style="font-size: 15px;">被影响的同事可以及时了解他受到的影响。&nbsp;</span></p><p><span style="font-size: 15px;">团队Leader或者产品架构师如果觉得PR邀请的审核者不足或者过多，必须调整为合适的人员，其它同事可以在评论中建议。</span></p></blockquote><h1>三、收获</h1><p><span style="font-size: 15px;">我们团队实施Code Review收获不少，总结出来大概有以下几点：</span></p><p><span style="font-size: 15px;">1、短期内迅速提高了代码质量。</span><br/><span style="font-size: 15px;">&nbsp; &nbsp; &nbsp;原因有几个，大家知道自己的代码会被人审核之后写得会比较认真。<br/>&nbsp; &nbsp; &nbsp;理论上代码质量是由整个团队内最优秀的那个人决定的。<br/>&nbsp; &nbsp; &nbsp;大家也能在Review的过程中学习到其它同事优秀的编码。</span></p><p><span style="font-size: 15px;">2、Bug数量迅速减少。</span><br/><span style="font-size: 15px;">&nbsp; &nbsp; 但是这个我们没有数据统计比较，比较遗憾。<br/>&nbsp; &nbsp; 我和QA聊过，他给我的数据是在我们的一个新项目每2周一次的大发布，平均只会发现1~2个Bug。</span><br/><span style="font-size: 15px;">&nbsp; &nbsp; 这点提高了整个团队的幸福感，大家不用经常被火烧眉毛。</span></p><p><span style="font-size: 15px;">3、团队成员对项目的熟悉程度会比较均衡。</span><br/><span style="font-size: 15px;">&nbsp; &nbsp; 新同事通过参与Code Review能很快熟悉团队的规范。</span><br/><span style="font-size: 15px;">&nbsp; &nbsp; 代码不会只有个别人了解、熟悉，Bug谁都能改，新功能谁都能做。<br/>&nbsp; &nbsp; 对公司来说避免了人员的风险，对个人来说比较轻松（谁都能来帮你），可以选自己喜欢的任务做。</span></p><p><span style="font-size: 15px;">4、改善团队的氛围</span><br/><span style="font-size: 15px;">&nbsp; &nbsp; Review的过程中会需要非常多的沟通，多沟通能拉近团队成员的距离。</span><br/><span style="font-size: 15px;">&nbsp; &nbsp; 并且无论级别高低，大家的代码都是要经过Review的，可以在团队内营造一个平等的氛围。<br/>&nbsp; &nbsp; 每个成员都可以审查别人的代码，这很容易激发他们的积极性。</span></p><p><span style="font-size: 15px;"><br/><span style="line-height: 1.5;">亮一下我们的数据:</span></span></p><p><span style="font-size: 15px;">我们从2014年1月17日开始第一个PR的提交，到2016年7月5日一共发出了6944个PR，其中6171个通过，739个拒绝。日均11.85个PR，最多的一天提了55个PR。<br/><span style="line-height: 1.5;">这些PR一共产生了30040个评论，平均每个PR有4.32个评论，最多的一个PR有239个评论。<br/></span><span style="line-height: 1.5;">参与上述PR评论的同事一共有53位，平均每位同事发出了539个评论，最多的用户发出了5311个评论，最少的发了1个（刚推行Code Review就离职的同事）。<br/></span><span style="line-height: 1.5;">需要说明一下，只有简单的问题会通过评论来提出。比较复杂的，比如涉及到架构、安全等方面的问题，其实都会面对面的沟通，因为这样效率更高。</span></span></p><h1>四、总结</h1><p><span style="font-size: 15px;"><span style="line-height: 1.5;">虽然有合适的工具支持会更容易实施Code Review，但它本身并不特别依赖具体的工具，所以前文并没有具体指明我们用了什么工具，除了Git。<br/></span>原因是基于分支的PR流程依赖于大量创建分支，而Git创建一个分支非常的简单，所以PR模式+Git是一个很好的搭配。<br/>我们在切换到Git之前，也做Code Review，采用的是提交代码以后把commit的Id发给相关同事来审查的流程。<br/>审核通过以后会在缺陷跟踪管理系统里面评论，QA同事没见到审核通过的评论就认为任务没有完成，拒绝进行测试。<br/>虽然没有现在这样直接方便，但是也还是做起来了。</span></p><p><br/></p>', 1491363293, 1502899551, 138, 1, 'git', '我们为什么要推行Code Review呢？我们当时面临着代码混乱、Bug频出的状况。经过简单的对比、试用，我们最后采用了Git Flow+Pull Request（PR）模式来做Code Review。', 'images/thumb_default.jpg', 6);
INSERT INTO `blogs` (`id`, `title`, `content`, `created_at`, `updated_at`, `click`, `user_id`, `tags`, `abstract`, `thumb_img`, `cate_id`) VALUES
(56, 'Mysql的主从复制配置详解', '<p>这里以最简单的结构来举例，假设主服务器为A（192.168.1.25），从服务器为B（192.168.1.88），AB都已经安装好Mysql。</p><p>接下来，开始进行数据库主从复制的配置。<br/>1.主数据库配置<br/>修改主数据库配置文件 /etc/my.cnf（win下为my.ini）</p><pre class="brush:bash;toolbar:false">[mysqld]\r\nserver-id=1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#没有则新增\r\nlog-bin=mysql-bin&nbsp;&nbsp;&nbsp;&nbsp;#没有则新增</pre><p>log-bin 开启数据库操作日志，主从复制的过程本质就是从数据库在主数据库读取该日志文件，并且再执行一次。server-id只要满足在数据库集群中不重复即可。</p><p>保存退出，重启Mysqld服务，使配置生效。注意：将my.cnf保存后，要将权限恢复（chmod 644），否则可能会提示出错。</p><p>登陆主数据库：</p><pre class="brush:bash;toolbar:false">#&nbsp;mysql&nbsp;-uroot&nbsp;-pyourpassword</pre><p>查看主数据库master状态：</p><pre class="brush:bash;toolbar:false">mysql&gt;&nbsp;show&nbsp;master&nbsp;status\\G\r\n***************************&nbsp;1.&nbsp;row&nbsp;***************************\r\nFile:&nbsp;mysql-bin.000005\r\nPosition:&nbsp;1416\r\nBinlog_Do_DB:\r\nBinlog_Ignore_DB:\r\nExecuted_Gtid_Set:\r\n1&nbsp;row&nbsp;in&nbsp;set&nbsp;(0.00&nbsp;sec)</pre><p>我们需要记住的是 mysql-bin.000005和1416两个值，后面在配置从服务器时使用。</p><p>从数据库要读取主数据库日志文件，需要主数据开放授权用户：</p><pre class="brush:bash;toolbar:false">mysql&gt;&nbsp;GRANT&nbsp;REPLICATION&nbsp;SLAVE&nbsp;ON&nbsp;*.*&nbsp;to&nbsp;&#39;slave&#39;@&#39;192.168.1.88&#39;&nbsp;identified&nbsp;by&nbsp;&#39;root&#39;</pre><p>这里我们新增了授权用户slave密码root，授权主机为192.168.1.88。</p><p>Mysql提供访问权限控制，若以主机的方式远程访问数据库，需要开启相应权限。</p><pre class="brush:bash;toolbar:false">mysql&gt;&nbsp;GRANT&nbsp;ALL&nbsp;PRIVILEGES&nbsp;ON&nbsp;*.*&nbsp;TO&nbsp;&#39;root&#39;@&#39;192.168.1.25&#39;&nbsp;IDENTIFIED&nbsp;BY&nbsp;&#39;root&#39;&nbsp;WITH&nbsp;GRANT&nbsp;OPTION;\r\nmysql&gt;&nbsp;FLUSH&nbsp;PRIVILEGES;\r\nmysql&gt;&nbsp;GRANT&nbsp;ALL&nbsp;PRIVILEGES&nbsp;ON&nbsp;*.*&nbsp;TO&nbsp;&#39;root&#39;@&#39;192.168.1.88&#39;&nbsp;IDENTIFIED&nbsp;BY&nbsp;&#39;root&#39;&nbsp;WITH&nbsp;GRANT&nbsp;OPTION;\r\nmysql&gt;&nbsp;FLUSH&nbsp;PRIVILEGES;</pre><p>此外还需要修改iptables，对数据库端口3306放行。</p><pre class="brush:bash;toolbar:false">#&nbsp;vim&nbsp;/etc/sysconfig/iptables</pre><pre class="brush:bash;toolbar:false">-A&nbsp;INPUT&nbsp;-m&nbsp;state&nbsp;--state&nbsp;NEW&nbsp;-m&nbsp;tcp&nbsp;-p&nbsp;tcp&nbsp;--dport&nbsp;3306&nbsp;-j&nbsp;ACCEPT</pre><p>至此，完成主数据库配置。接下来，让我们进行从数据库配置。</p><p>2.从数据库配置</p><p>从数据库配置相对主数据配置相对简单，现以服务器B为例进行说明。 <br/>修改从数据库配置文件:</p><pre class="brush:bash;toolbar:false">server-id=2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#没有则新增,注意id不可与主服务器相同\r\nreplicate_wild_do_table=test.%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#需要执行复制的表\r\nreplicate_wild_ignore_table=mysql.%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#忽略复制的表</pre><p>这里的replicate_wild_do_table和replicate_wild_ignore_table制定了从服务器的复制规则。</p><p>很多时候，一些朋友会在主服务器设置：</p><pre class="brush:bash;toolbar:false">Binlog_Do_DB:\r\nBinlog_Ignore_DB:</pre><p>在主服务器上限定规则，但这样做已被证实有跨库操作失败的问题，还可能会造成主服务器的压力，故而我们选择在从服务器制定接受复制的规则。</p><p>然后，设置主从数据库同步点：</p><pre class="hljs bash">mysql&gt;&nbsp;change&nbsp;master&nbsp;to&nbsp;master_host=&#39;192.168.1.25&#39;,master_user=&#39;slave&#39;,master_password=&#39;root&#39;,master_log_file=&#39;mysql-bin.000005&#39;,master_log_pos=1416;</pre><p>没错，其中两个关键的数值，就是我们在主数据库查看master状态所显示的信息。</p><p>下面启动从服务器：</p><pre class="hljs less">mysql&gt;&nbsp;start&nbsp;slave;</pre><p>查询slave状态：</p><pre class="hljs markdown">mysql&gt;&nbsp;show&nbsp;slave&nbsp;status\\G***************************&nbsp;1.&nbsp;row&nbsp;***************************&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Slave_IO_State:&nbsp;Waiting&nbsp;for&nbsp;master&nbsp;to&nbsp;send&nbsp;event\r\nMaster_Host:&nbsp;1XX.XX.XX.181\r\nMaster_User:&nbsp;slave\r\nMaster_Port:&nbsp;3306\r\nConnect_Retry:&nbsp;60\r\nMaster_Log_File:&nbsp;mysql-bin.000005\r\nRead_Master_Log_Pos:&nbsp;1416\r\nRelay_Log_File:&nbsp;mysqld-relay-bin.000005\r\nRelay_Log_Pos:&nbsp;251\r\nRelay_Master_Log_File:&nbsp;mysql-bin.000005\r\nSlave_IO_Running:&nbsp;Yes\r\nSlave_SQL_Running:&nbsp;Yes\r\nReplicate_Do_DB:&nbsp;\r\nReplicate_Do_Table:&nbsp;\r\nReplicate_Ignore_Table:&nbsp;\r\nReplicate_Wild_Do_Table:&nbsp;\r\nReplicate_Wild_Ignore_Table:&nbsp;\r\nLast_Errno:&nbsp;0\r\nLast_Error:&nbsp;\r\nSkip_Counter:&nbsp;0\r\nExec_Master_Log_Pos:&nbsp;1416\r\nRelay_Log_Space:&nbsp;758\r\nUntil_Condition:&nbsp;None\r\nUntil_Log_File:&nbsp;\r\nUntil_Log_Pos:&nbsp;0\r\nMaster_SSL_Allowed:&nbsp;No\r\nMaster_SSL_CA_File:&nbsp;\r\nMaster_SSL_CA_Path:&nbsp;\r\nMaster_SSL_Cert:&nbsp;\r\nMaster_SSL_Cipher:&nbsp;\r\nMaster_SSL_Key:&nbsp;\r\nSeconds_Behind_Master:&nbsp;0\r\nMaster_SSL_Verify_Server_Cert:&nbsp;No\r\nLast_IO_Errno:&nbsp;0\r\nLast_IO_Error:&nbsp;\r\nLast_SQL_Errno:&nbsp;0\r\nLast_SQL_Error:</pre><p>只有当Slave_IO_Running和Slave_SQL_Running都显示Yes时，才表示主从复制配置成功。否则失败，检查上述配置过程。</p>', 1491461047, 1503391400, 256, 1, 'mysql', '我们通过配置主从数据库服务器来达到数据同步的目的。本文介绍了主要的配置操作和一些注意点。', 'upload/thumbimg/03e1405bf8b41debd27b718dc50bfaf4.png', 4),
(57, 'Laravel5实现Mysql数据库读写分离', '<p>在Laravel5中可以很轻松的简单实现读写数据库分离。</p><p>设置config\\database.php</p><pre class="brush:php;toolbar:false">&#39;mysql&#39;&nbsp;=&gt;&nbsp;[\r\n&nbsp;&nbsp;&#39;write&#39;=&gt;[\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&#39;host&#39;=&gt;&#39;192.168.1.2&#39;,&#39;port&#39;&nbsp;=&gt;&#39;3306&#39;,],\r\n&nbsp;&nbsp;],\r\n&nbsp;&nbsp;&nbsp;&#39;read&#39;=&gt;[\r\n&nbsp;&nbsp;&nbsp;&nbsp;[&#39;host&#39;=&gt;&#39;192.168.1.3&#39;,&#39;port&#39;&nbsp;=&gt;&#39;3306&#39;,],\r\n&nbsp;&nbsp;&nbsp;&nbsp;[&#39;host&#39;=&gt;&#39;192.168.1.4&#39;,&#39;port&#39;&nbsp;=&gt;&#39;3306&#39;,],\r\n&nbsp;&nbsp;&nbsp;],\r\n&nbsp;&nbsp;&#39;driver&#39;&nbsp;=&gt;&nbsp;&#39;mysql&#39;,\r\n&nbsp;&nbsp;&#39;database&#39;&nbsp;=&gt;&nbsp;&#39;laravel&#39;,\r\n&nbsp;&nbsp;&#39;username&#39;&nbsp;=&gt;&nbsp;&#39;root&#39;,\r\n&nbsp;&nbsp;&#39;password&#39;&nbsp;=&gt;&nbsp;&#39;root&#39;,\r\n&nbsp;&nbsp;&#39;unix_socket&#39;&nbsp;=&gt;&nbsp;&#39;&#39;,\r\n&nbsp;&nbsp;&#39;charset&#39;&nbsp;=&gt;&nbsp;&#39;utf8mb4&#39;,\r\n&nbsp;&nbsp;&#39;collation&#39;&nbsp;=&gt;&nbsp;&#39;utf8mb4_unicode_ci&#39;,\r\n&nbsp;&nbsp;&#39;prefix&#39;&nbsp;=&gt;&nbsp;&#39;&#39;,\r\n&nbsp;&nbsp;&#39;strict&#39;&nbsp;=&gt;&nbsp;true,\r\n&nbsp;&nbsp;&#39;engine&#39;&nbsp;=&gt;&nbsp;null,\r\n],</pre><p>需要注意的是防火墙和mysql的权限问题，开启3306端口并在从服务器上授权主服务器的远程访问权限。<br/></p>', 1491464411, 1503375890, 540, 1, 'laravel,php,mysql', '在Laravel5中可以很轻松的简单实现读写数据库分离，通过修改database配置文件即可，并处理mysql访问权限即可。', 'upload/thumbimg/01f8aa5339af60ea7a65509f28f374a4.png', 3),
(65, 'Laravel用Entrust实现RBAC的几个问题', '<p>说明文档中说到使用下面两种注入路由的方法来验证用户角色权限。</p><pre>Entrust::routeNeedsPermission\r\nEntrust::routeNeedsRole</pre><p>需要注意的是在Laravel5中这两种方法已经失效。</p><p>查看源码发现：</p><pre class="brush:php;toolbar:false">//&nbsp;Same&nbsp;as&nbsp;Route::filter,&nbsp;registers&nbsp;a&nbsp;new&nbsp;filter\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;app-&gt;router-&gt;filter($filterName,&nbsp;$closure);\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Same&nbsp;as&nbsp;Route::when,&nbsp;assigns&nbsp;a&nbsp;route&nbsp;pattern&nbsp;to&nbsp;the\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;previously&nbsp;created&nbsp;filter.\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;app-&gt;router-&gt;when($route,&nbsp;$filterName);</pre><p>这里使用的 Route::filter() 在Laravel5新版中已经舍弃。</p><pre class="brush:php;toolbar:false">2015-05-29&nbsp;Update:&nbsp;Middleware&nbsp;parameters&nbsp;are&nbsp;available&nbsp;starting&nbsp;with&nbsp;Laravel&nbsp;5.1.\r\n2015-06-10&nbsp;Update:&nbsp;Route&nbsp;filters&nbsp;have&nbsp;been&nbsp;\r\ndeprecated&nbsp;in&nbsp;preference&nbsp;of&nbsp;middleware&nbsp;and&nbsp;will&nbsp;be&nbsp;removed&nbsp;entirely&nbsp;with\r\nthe&nbsp;release&nbsp;of&nbsp;Laravel&nbsp;5.2&nbsp;in&nbsp;December&nbsp;2015.</pre><p>在最后的权限检查中，如果失败则返回http错误(403)</p><p>找到 Zizaco\\Entrust\\Middleware 中源码</p><pre class="brush:php;toolbar:false">if&nbsp;($this-&gt;auth-&gt;guest()&nbsp;||&nbsp;!$request-&gt;user()-&gt;ability($roles,&nbsp;$permissions,&nbsp;[&nbsp;&#39;validate_all&#39;&nbsp;=&gt;&nbsp;$validateAll&nbsp;]))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abort(403);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p>自行修改或做其他redirect处理即可。</p>', 1492177602, 1503421046, 599, 1, 'laravel,rbac', 'Laravel用Entrust实现RBAC管理（用户-角色-权限），在实际操作中遇到些小问题，记录如下。', 'images/thumb_default.jpg', 3),
(66, 'Webpack下使用Css-Modules的配置', '<p>CSS 模块化的解决方案有很多，但主要有两类。一类是彻底抛弃 CSS，使用 JS 或 JSON 来写样式。另一类是依旧使用 CSS，但使用\r\n JS 来管理样式依赖，代表是CSS Modules。CSS Modules 能最大化地结合现有 CSS 生态和 JS 模块化能力，API \r\n简洁到几乎零学习成本。发布时依旧编译出单独的 JS 和 CSS。它并不依赖于 React，只要你使用 Webpack，可以在 \r\nVue/Angular/jQuery 中使用。</p><p>CSS Modules 内部通过ICSS 来解决样式导入和导出这两个问题。分别对应 \r\n:import 和 :export 两个新增的伪类。但直接使用这两个关键字编程太麻烦，实际项目中很少会直接使用它们，我们需要的是用 JS 来管理\r\n CSS 的能力。结合 Webpack 的 css-loader 后，就可以在 CSS 中定义样式，在 JS 中导入。 <br/>启用 CSS Modules:</p><pre class="brush:js;toolbar:false">//&nbsp;webpack.config.js\r\ncss-loader?modules&amp;localIdentName=[name]_[local]_[hash:base64:5]</pre><p>加上 modules 即为启用， localIdentName 是设置生成样式的命名规则。</p><p>name=模块 local=类名 后面是随机hash确保不重复</p><pre class="brush:js;toolbar:false">/*&nbsp;components/Button.css&nbsp;*/\r\n.normal&nbsp;{&nbsp;/*&nbsp;normal&nbsp;相关的所有样式&nbsp;*/&nbsp;}\r\n.disabled&nbsp;{&nbsp;/*&nbsp;disabled&nbsp;相关的所有样式&nbsp;*/&nbsp;}</pre><pre class="brush:js;toolbar:false">/*&nbsp;components/Button.js&nbsp;*/\r\nimport&nbsp;style&nbsp;from&nbsp;&#39;./Button.css&#39;;\r\nbuttonElem.outerHTML&nbsp;=&nbsp;`&lt;button&nbsp;class={style.normal}&gt;Submit&lt;/button&gt;`</pre><p>使用{style.normal}作为类名，将保证此类使用style(./Button.css)中的.normal类的样式，生成的类名则是：</p><pre class="brush:js;toolbar:false">&lt;button&nbsp;class=&quot;button_normal_abcdf&quot;&gt;&nbsp;Processing...&nbsp;&lt;/button&gt;</pre><p>类似 button_normal_abcdf 这种我们定义好规则的随机类名。</p><p><br/>如果要在全局中使用样式，则去掉webpack.config.js中这段即可：</p><pre class="brush:js;toolbar:false">?modules&amp;localIdentName=[name]_[local]_[hash:base64:5]</pre><p>这样将不会生成随机的类名，一切按我们在css文件中的定义正常加载。</p><p>如果开启了modules-css 那我们可以在局部这样使用：<br/></p><pre class="brush:js;toolbar:false">//&nbsp;&nbsp;main.js\r\nimport&nbsp;style&nbsp;from&nbsp;&#39;./App.css&#39;\r\nexport&nbsp;default&nbsp;{\r\n&nbsp;&nbsp;return&nbsp;(\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;class={style.title}&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello&nbsp;World&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/h1&gt;\r\n&nbsp;&nbsp;);\r\n}</pre><pre class="brush:js;toolbar:false">//&nbsp;&nbsp;App.css\r\n.title&nbsp;{\r\n&nbsp;&nbsp;color:&nbsp;red;}</pre><p>最后编译结果：</p><pre class="brush:js;toolbar:false">//&nbsp;&nbsp;main.js\r\n&lt;h1&nbsp;class=&quot;style_title_abcde&quot;&gt;\r\n&nbsp;&nbsp;Hello&nbsp;World&lt;/h1&gt;\r\n//&nbsp;&nbsp;App.css\r\n.style_title_abcde&nbsp;{\r\n&nbsp;&nbsp;color:&nbsp;red;}</pre><p>全局使用：</p><pre class="brush:js;toolbar:false">//&nbsp;&nbsp;App.css\r\n.title&nbsp;{\r\n&nbsp;&nbsp;color:&nbsp;red;\r\n}\r\n:global(.title)&nbsp;{\r\n&nbsp;&nbsp;color:&nbsp;green;\r\n}</pre><p>用 :global定义全局可用样式</p><pre class="brush:js;toolbar:false">&lt;h1&nbsp;class={title}&gt;\r\n&nbsp;&nbsp;&nbsp;Hello&nbsp;World&nbsp;&nbsp;&nbsp;&nbsp;\r\n&lt;/h1&gt;</pre><p>这样我们将直接引用：global(.title)的样式。标题显示绿色。</p><p>composes继承：</p><pre class="brush:js;toolbar:false">.blog&nbsp;{\r\n&nbsp;&nbsp;background-color:&nbsp;blue;\r\n}\r\n.title&nbsp;{\r\n&nbsp;&nbsp;composes:&nbsp;blog;\r\n&nbsp;&nbsp;//&nbsp;composes:&nbsp;blog&nbsp;from&nbsp;&#39;./another.css&#39;;&nbsp;&nbsp;//也可以这样用\r\n&nbsp;&nbsp;color:&nbsp;red;\r\n}</pre><p>这样如果我们开启modules，那最终形成的h1的class会成为: class=&quot;.style_blog_abcde .style_title_cdefg&quot;这种格式。<br/></p>', 1492656972, 1503421047, 560, 1, 'webpack,css', 'CSS 模块化的解决方案有很多，但主要有两类。一类是彻底抛弃 CSS，使用 JS 或 JSON 来写样式。另一类是依旧使用 CSS，但使用 JS 来管理样式依赖，代表是CSS Modules。CSS Modules 能最大化地结合现有 CSS 生态和 JS 模块化能力，API 简洁，发布时依旧编译出单独的 JS 和 CSS。它并不依赖于其他，只要你使用 Webpack，可以在 Vue/Angular/jQuery 中使用。', 'images/thumb_default.jpg', 7),
(67, 'CSS中的绝对定位与相对定位', '<p>position：relative&nbsp;|&nbsp;absolute&nbsp;|&nbsp;static&nbsp;|&nbsp;fixed</p><p>static（静态）<br/></p><p>&nbsp;没有特别的设定，遵循基本的定位规定，不能通过z-index进行层次分级。</p><p>relative（相对定位）</p><p>&nbsp;对象不可层叠、不脱离文档流，参考自身静态位置通过top,bottom,left,right定位，并且可以通过z-index进行层次分级。</p><p>absolute（绝对定位）</p><p>&nbsp;脱离文档流，通过top,bottom,left,right定位。选取其最近一个<strong>最近的有定位设置</strong>的父级对象进行绝对定位，如果对象的父级没有设置定位属性，absolute元素将以body坐标原点进行定位，可以通过z-index进行层次分级。 <br/></p><p>fixed（固定定位）</p><p>这里所固定的参照对像是可视窗口而并非是body或是父级元素。可通过z-index进行层次分级。</p><p><br/></p><p>position:absolute; 即绝对定位，配合top,bottom,left,right进行定位。<br/></p><p>我们特别要注意的是它的参照对象。从规则中看到，absolute元素以一个<strong>最近的有定位设置</strong>的父级对象作为参照：</p><p>什么叫有定位设置，当它的某一级祖先的position被定义为：relative|absolute时，我们就认为该祖先即是有定位设置的。<br/></p><p>此外，如果各级父元素都未被设置定位，参照物则为顶级元素，一般为body。</p><p><br/></p><p>下面看几个图例。<br/></p><p>层级关系为：</p><p><em>&lt;div ——————————— position:relative; 不是最近的祖先定位元素，不是参照物<br/>&lt;div—————————-没有设置为定位元素，不是参照物<br/>&lt;div———————- position:relative 参照物<br/>&lt;div box1<br/>&lt;div box2 ——–position:absolute; top:50px; left:120px;<br/>&lt;div box3<br/>效果图：</em></p><p><img src="/upload/image/20170425/1493097911315955.jpg" alt=""/></p><p>为改变参照物（橘色框）后的效果<br/>层级关系为：<br/>&lt;div ——————————— position:relative;最近的祖先定位元素，参照物<br/>&lt;div—————————-没有设置为定位元素，不是参照物<br/>&lt;div———————-没有设置为定位元素，不是参照物<br/>&lt;div box1<br/>&lt;div box2 ——–position:absolute; top:50px; left:120px;<br/>&lt;div box3<br/>效果图：</p><p><img src="/upload/image/20170425/1493097911206125.jpg" alt=""/></p><p><strong>参照物为最顶级的元素情况</strong>。<br/>层级关系为：<br/>&lt;div ———————————没有设置为定位元素，不是参照物<br/>&lt;div—————————-没有设置为定位元素，不是参照物<br/>&lt;div———————-没有设置为定位元素，不是参照物<br/>&lt;div box1<br/>&lt;div box2 ——–position:absolute; top:50px; left:120px;<br/>&lt;div box3<br/>效果图：</p><p><img src="/upload/image/20170425/1493097912891030.jpg" alt=""/></p><p><br/></p>', 1493097974, 1503324641, 507, 1, 'css,position', '定位问题一直是网页构成的要点和最容易引发问题的地方，如果理不清楚定位那么可能应实现的效果实现不了，实现了的效果可能会走样。如果理清了定位的原理，那定位会让网页实现的更加完美。', 'images/thumb_default.jpg', 8),
(68, '关于DIV中Margin(空白边)的叠加问题', '<p>当两个垂直空白边（Margin）相遇时，他们将形成一个空白边。这个空白边的高度等于两个发生叠加的空白边的高度重的较大者。空白边叠加可能发生在两个相邻的元素，父元素与子元素。只有普通文档流中的块级元素的垂直空白边才会发生叠加，行内元素、浮动元素以及绝对定位的元素的垂直空白边不会叠加。</p><p>一、css中空白边叠加的几种情况</p><p>1、元素的顶空白边与前面元素的底空白边发生叠加</p><p>当一个元素出现在另一个元素上面时，第一个元素的底空白边与第二个元素的顶空白边发生叠加，如下图所示。</p><p><img alt="" src="/upload/image/20170427/1493266169721773.jpg"/></p><p>2、元素的顶空白边与父元素的顶空白边发生叠加</p><p>当一个元素包含在另一个元素中时（假设没有填充或边框将空白边分隔开），它们的顶和/或底空白边也发生叠加，如下图所示。</p><p><img alt="" src="/upload/image/20170427/1493266171616751.jpg"/></p><p>3、元素的顶空白边与底空白边发生叠加</p><p>空白边甚至可以与本身发生叠加。假设有一个空元素，它有空白边，但是没有边框或填充。在这种情况下，顶空白边与底空白边就碰到了一起，它们会发生叠加，如下图所示。</p><p><img alt="" src="/upload/image/20170427/1493266172207026.jpg"/></p><p>4、空元素中已经叠加的空白边与另一个空元素的空白边发生叠加</p><p>如果这个空白边碰到另一个元素的空白边，它还会发生叠加，如下图所示。</p><p><img alt="" src="/upload/image/20170427/1493266173147109.jpg"/></p><p><br/></p>', 1493266325, 1502871435, 329, 1, 'css', '当两个垂直空白边相遇时，他们将形成一个空白边。这个空白边的高度等于两个发生叠加的空白边的高度重的较大者。空白边叠加可能发生在两个相邻的元素，父元素与子元素。只有普通文档流中的块级元素的垂直空白边才会发生叠加，行内元素、浮动元素以及绝对定位的元素的垂直空白边不会叠加。', 'images/thumb_default.jpg', 8),
(69, 'Vue2+Webpack开发下走过的坑', '<p>Webpack也算是web前段开发常用打包工具了，最新的vue2与之结合，开发效率那叫一个舒爽。但也有一些或大或小的坑，总结一下。</p><p>Webpack-dev-server是一个小型node.js express服务器，当我们启动--inline模式后，便可以看到实时更新的效果。</p><pre class="brush:js;toolbar:false">&quot;scripts&quot;:&nbsp;\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;start&quot;:&nbsp;&quot;webpack-dev-server&nbsp;&nbsp;--inline&nbsp;--host&nbsp;0.0.0.0&quot;,\r\n}</pre><p>图上package.json的配置中， --host 0.0.0.0的作用在于，让外网（局域网）可以访问此端口。</p><pre class="brush:js;toolbar:false">devServer:&nbsp;{\r\n	port:8725,\r\n	contentBase:&nbsp;&quot;./public&quot;,\r\n	historyApiFallback:&nbsp;true\r\n	inline:&nbsp;true\r\n}</pre><p>我们可以在webpack.config.js中设置端口port。</p><p>在入口文件中，我们可以直接import vue，并为之命名然后使用：</p><pre class="brush:js;toolbar:false">import&nbsp;Vue&nbsp;from&nbsp;&#39;vue/dist/vue.js&#39;;</pre><p>也可以将vue作为cdn在index.html文件中引用：</p><pre class="brush:js;toolbar:false">&lt;script&nbsp;src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</pre><p>如果采用了第二种方式，会在运行时自动注册Vue为全局变量。</p><p>但是，需要注意的是，修改了引用方式后，在Webpack-dev-server的inline模式下的热更新，会出现错误，需要重新启动服务器才可以看到效果。</p><p>我们在开发时，一般使用第一种方式，而在上线时，可以用第二种方式，这样可以加快js的载入，但需要注意js引入的顺序问题。</p><p>在配置了Webpack-dev-server后，可能会出现以下问题：</p><pre class="brush:js;toolbar:false">Unknown&nbsp;custom&nbsp;element:&nbsp;&lt;router-link&gt;&nbsp;-&nbsp;did&nbsp;you&nbsp;register&nbsp;the&nbsp;component&nbsp;correctly?&nbsp;For&nbsp;recursive&nbsp;components,&nbsp;make&nbsp;sure&nbsp;to&nbsp;provide&nbsp;the&nbsp;&quot;name&quot;&nbsp;option.</pre><p>以及&lt;router-view&gt;同样的错误，这里首先排除是否使用Vue.use的问题后，还应该注意的是：</p><p>使用Webpack-dev-server开发，不得直接使用<br/></p><pre class="brush:js;toolbar:false">import&nbsp;Vue&nbsp;from&nbsp;&#39;vue/dist/vue.js&#39;;</pre><p>而是在webpack.config中加入：</p><pre class="brush:js;toolbar:false">resolve:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;alias:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;vue$&#39;:&nbsp;&#39;vue/dist/vue.js&#39;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;},\r\n\r\n},</pre><p>再用&nbsp;</p><pre class="brush:js;toolbar:false">import&nbsp;Vue&nbsp;from&nbsp;&#39;vue&#39;；</pre><p>来引入Vue，顺利解决这个问题。</p>', 1493443648, 1503470432, 2057, 1, 'vue,webpack', 'Webpack也算是web前段开发常用打包工具了，最新的vue2与之结合，开发效率那叫一个舒爽。但也有一些或大或小的坑，总结一下。', 'upload/thumbimg/e743b7e5206adae997d5768a7a4df2ef.png', 7),
(70, 'Designpattern：AbstractFactory（设计模式之抽象工厂）', '<p style="text-indent: 2em;"><span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;">在工厂方法模式中，我们的具体创建者每次使用都只能创建一个同类型的对象，假如我们现在需要的是多个不同类型的对象，工厂方法就满足不了需求了。这时我们可以把多个工厂方法组合到一个类，这就是抽象工厂模式，它就是专门用来创建多个产品，也可以说是创建产品家族的。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;">首先区分一下<span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(255, 0, 0);">产品等级结构</span>和<span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(255, 0, 0);">产品族</span>概念。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;">产品等级结构就是产品的继承结构，如一个抽象类是电视机，其子类海尔电视机和海信电视机等，则抽象电视机和具体品牌的电视机之间构成了一个产品等级结构。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;">产品族是指位于不同产品等级结构中，功能相关联的产品组成的家族。一般是位于不同的等级结构中的相同位置上。显然，每一个产品族中含有产品的数目，与产品等级结构的数目是相等的，形成一个二维的坐标系，如图，纵向的，每一个抽象产品类和它的具体产品子类，组成一个产品等级结构。横向的，每个具体工厂生产具体产品的组合就是产品族。</span></p><p><br/></p><p style="margin:0 auto"><img src="/upload/image/20170502/1493739074677228.jpg" title="1493739074677228.jpg" alt="1493739074677228.jpg" width="800" height="461"/></p><p><br/></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;">如图，我们定义了一个抽象的程序工厂类ProgramFactory。现在暂时有Web和Game两类产品。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;">在抽象工厂中，我们规定了newWeb和newGame方法来赋予程序工厂能够生产程序的功能。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;">我们定义了具体的细分工厂类：Java工厂、Php工厂和Js工厂。并根据抽象工厂的能力，分别赋予他们生产特定产品的方法。每个生产方法对应一个由抽象产品而衍生出的具体产品类。通过调用生产方法，实例化这些具体产品类，即达到了具体工厂生产具体产品的目的。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;">如图，如果想增加一个工厂，只需再延伸出一个完整的产品族（横线），可以看出我们可以从抽象工厂衍生一个新的工厂并很方便增加产品族，而不需要对已有的结构做任何修改，遵守了开闭原则。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;">而如果程序工厂能生产的产品类增加，我们就需要增加整条产品等级结构（纵向），这样会涉及到修改抽象工厂类及其下面的具体工厂类。</span></p><p><br/></p>', 1493739139, 1503470434, 974, 1, 'design-pattern', '当每个抽象产品都有多于一个的具体子类的时候，工厂角色怎么知道实例化哪一个子类呢？比如每个抽象产品角色都有两个具体产品。抽象工厂模式提供两个具体工厂角色，分别对应于这两个具体产品角色，每一个具体工厂角色只负责某一个产品角色的实例化。每一个具体工厂类只负责创建抽象产品的某一个具体子类的实例。每一个模式都是针对一定问题的解决方案，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式针对的是多个产品等级结构。', 'upload/thumbimg/b69ddb570fcbbfdc2536c49ae69cea61.png', 1),
(71, '设计模式：原型模式&浅拷贝与深拷贝解析', '<p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">原型模式的主要思想是基于现有的对象克隆一个新的对象出来，一般是用对象内部提供的克隆方法，通过该方法返回一个对象的副本。简单地说，就是用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</span></p><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">我们可以简单的从实现对一个对象实例的拷贝（复制）来说明。</span></p><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">首先我们来看看我们的原型类：</span></p><pre class="brush:php;toolbar:false"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">class&nbsp;Data<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$string&nbsp;=&nbsp;&quot;字符串数据&quot;;<br/>}<br/><br/>class&nbsp;Proto<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$data;<br/>&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__construct(Data&nbsp;$data)<br/>&nbsp;&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data&nbsp;=&nbsp;$data;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/><br/>$data&nbsp;=&nbsp;new&nbsp;Data;<br/>$p1&nbsp;=&nbsp;new&nbsp;Proto($data);<br/>$p2&nbsp;=&nbsp;$p1;<br/>var_dump($p1===$p2?&quot;同一个对象&quot;:&quot;不同对象&quot;);<br/>var_dump($p1-&gt;data===$p2-&gt;data?&quot;同一个数据&quot;:&quot;不同数据&quot;);<br/></span></pre><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">$p2=$p1是我们常用的方式，这样做的结果是创建了一个新对象吗？答案是否定的。在这个结果中，p1、p2指向同一个内存地址，是同一个对象。P2只是对p1作了引用。</span></p><pre class="brush:php;toolbar:false"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">string&nbsp;&#39;同一个对象&#39;&nbsp;<br/>string&nbsp;&#39;同一个数据&#39;<br/></span></pre><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">&nbsp;那么如何正确的拷贝一个实例呢？</span></p><pre class="brush:php;toolbar:false"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">$p2&nbsp;=&nbsp;clone&nbsp;$p1;<br/>var_dump($p1===$p2?&quot;同一个对象&quot;:&quot;不同对象&quot;);<br/>var_dump($p1-&gt;data===$p2-&gt;data?&quot;同一个数据&quot;:&quot;不同数据&quot;);<br/></span></pre><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">我们使用clone魔术方法拷贝一个p2。</span></p><pre class="brush:js;toolbar:false"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">string&nbsp;&#39;不同对象&#39;<br/>string&nbsp;&#39;同一个数据&#39;<br/></span></pre><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">打印结果看出，p2与p1已经不是同一个对象，因此clone方法有效的对实例对象进行了复制。在这里，我们看到，虽然已经创造了新的对象，但是由于data属性是引用的外部对象Data的实例，因此p2和p1的data属性仍然指向的是同一个地址。</span></p><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">我们尝试做一下改变测试：</span></p><pre class="brush:php;toolbar:false"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">$p2-&gt;data-&gt;string&nbsp;=&nbsp;&#39;已修改的数据&#39;;<br/>var_dump($p1-&gt;data);<br/>var_dump($p2-&gt;data);<br/></span></pre><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">打印结果如下：</span></p><pre class="brush:php;toolbar:false"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">object(Data)[1]&nbsp;&nbsp;public&nbsp;&#39;string&#39;&nbsp;=&gt;&nbsp;string&nbsp;&#39;已修改的数据&#39;<br/>object(Data)[1]&nbsp;&nbsp;public&nbsp;&#39;string&#39;&nbsp;=&gt;&nbsp;string&nbsp;&#39;已修改的数据&#39;<br/></span></pre><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">可以看出p1和p2的data属性，是同时改变的。上述这种情况，我们称为浅拷贝。clone方法实现的就是浅拷贝。</span></p><p><img src="/upload/image/20170508/1494228343246136.jpg" title="1494228343246136.jpg" alt="QQ截图20170508145138.jpg"/></p><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">如果两个Proto对象的$data的地址值相同， 说明两个对象的$data都指向同一个Data对象， 也就是浅拷贝。</span></p><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">而如果两个对象的$data的地址值不同， 那么就说明指向不同的Data对象， 也就是在拷贝Proto对象的时候， 同时拷贝了$data引用的Data对象， 这就是深拷贝。上述的例子中，我们通过定义clone方法来达到实现深拷贝的目的。</span></p><pre class="brush:php;toolbar:false"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">class&nbsp;Proto<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$data;<br/>&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__construct(Data&nbsp;$data)<br/>&nbsp;&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data&nbsp;=&nbsp;$data;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__clone()<br/>&nbsp;&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;实现深拷贝<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data&nbsp;=&nbsp;clone&nbsp;$this-&gt;data;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>}<br/></span></pre><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">我们测试一下结果：</span></p><pre class="brush:php;toolbar:false"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">$data&nbsp;=&nbsp;new&nbsp;Data;<br/>$p1&nbsp;=&nbsp;new&nbsp;Proto($data);<br/>$p2&nbsp;=&nbsp;clone&nbsp;$p1;<br/><br/>var_dump($p1===$p2?&quot;同一个对象&quot;:&quot;不同对象&quot;);<br/>var_dump($p1-&gt;data===$p2-&gt;data?&quot;同一个数据&quot;:&quot;不同数据&quot;);<br/><br/>$p2-&gt;data-&gt;string&nbsp;=&nbsp;&#39;已修改的数据&#39;;<br/><br/>var_dump($p1-&gt;data);<br/>var_dump($p2-&gt;data);<br/><br/>//&nbsp;输出结果为：<br/>string&nbsp;&#39;不同对象&#39;<br/>string&nbsp;&#39;不同数据&#39;<br/>object(Data)[1]&nbsp;&nbsp;public&nbsp;&#39;string&#39;&nbsp;=&gt;&nbsp;string&nbsp;&#39;字符串数据&#39;&nbsp;<br/>object(Data)[4]&nbsp;&nbsp;public&nbsp;&#39;string&#39;&nbsp;=&gt;&nbsp;string&nbsp;&#39;已修改的数据&#39;<br/></span></pre><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">可以看到，拷贝的实例对象中，Data已经指向新创建的对象，他们的改变也是独立的互不影响。<br/></span></p><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">如果一个类拥有太多的属性，并且大多为对象引用时，实现深拷贝就需要定义大量的clone方法，因此，这种模式往往用在比较简单，并且对象之间的区别很小，可能只是很固定的几个属性不同的时候。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑,Microsoft YaHei;"><em><span style="font-size: 18px; font-family: arial,helvetica,sans-serif; color: rgb(255, 0, 0);">原型模式的适用：</span></em><span style="font-size: 16px; font-family: arial,helvetica,sans-serif;"><br/></span></span></p><p style="text-indent: 2em;"><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">有些时候我们通过诸如工厂模式等创建对象不值得，特别是以下的几个场景，可能使用原型模式更简单、效率更高。</span></p><ul style="list-style-type: disc;"><li><p><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">如果说我们的对象类型不是刚开始就能确定，而是在运行时确定的话，那么我们通过这个类型的对象克隆出一个新的类型更容易。</span></p></li><li><p><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">有的时候我们可能在实际的项目中需要一个对象在某个状态下的副本，这个前提很重要，这点怎么理解呢，例如有的时候我们需要对比一个对象经过处理后的状态和处理前的状态是否发生过改变，可能我们就需要在执行某段处理之前，克隆这个对象此时状态的副本，然后等执行后的状态进行相应的对比，这样的应用在项目中也是经常会出现的。</span></p></li><li><p><span style="font-size: 16px; font-family: 微软雅黑,Microsoft YaHei;">当我们处理的对象比较简单，并且对象之间的区别很小，可能只是很固定的几个属性不同的时候，使用原型模式更合适。</span></p></li></ul><p><br/></p><p><br/></p>', 1494228416, 1503421048, 478, 1, 'design-pattern', '深拷贝难以完全形成深拷贝，因为这要求继承链上的所有对象都集成Cloneable接口，实现clone方法，来保证非基本类型的对象被深拷贝', 'images/thumb_default.jpg', 1),
(72, 'JavaScript事件代理委托的应用', '<div style="white-space: normal;">在javasript中delegate这个词经常出现，看字面的意思，代理、委托。那么它究竟在什么样的情况下使用？它的原理又是什么？在各种框架中，也经常能看到delegate相关的接口。这些接口又有什么特殊的用法呢？这篇文章就主要介绍一下javascript delegate的用法和原理，以及Dojo，jQuery等框架中delegate的接口。</div><p style="white-space: normal;"><a></a><a></a><strong><span style="font-size: 20px;">JavaScript事件代理</span></strong></p><p style="white-space: normal;">首先介绍一下JavaScript的事件代理。事件代理在JS世界中一个非常有用也很有趣的功能。当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。这主要得益于浏览器的事件冒泡机制，后面会详细介绍。下面我们具体举个例子来解释如何使用这个特性</p><p style="white-space: normal;">在JavaScript中，经常会碰到要监听列表中多项li的情形，假设我们有一个列表如下：</p><pre>&lt;ul&nbsp;id=&quot;list&quot;&gt;\r\n&nbsp;&nbsp;&lt;li&nbsp;id=&quot;item1&quot;&gt;item1&lt;/li&gt;\r\n&nbsp;&nbsp;&lt;li&nbsp;id=&quot;item2&quot;&gt;item2&lt;/li&gt;\r\n&nbsp;&nbsp;&lt;li&nbsp;id=&quot;item3&quot;&gt;item3&lt;/li&gt;\r\n&nbsp;&nbsp;&lt;li&nbsp;id=&quot;item4&quot;&gt;item4&lt;/li&gt;\r\n&lt;/ul&gt;</pre><p style="white-space: normal;">如果我们要实现以下功能：当鼠标点击某一li时，alert输出该li的内容，我们通常的写法是这样的：</p><pre>window.onload=function(){\r\n&nbsp;&nbsp;var&nbsp;ul&nbsp;=&nbsp;document.getElementById(&quot;list&quot;);\r\n&nbsp;&nbsp;var&nbsp;lis&nbsp;=&nbsp;ul.childNodes;\r\n&nbsp;&nbsp;for(var&nbsp;i=0;i&lt;lis.length;i++){\r\n&nbsp;&nbsp;&nbsp;&nbsp;lis[i].addEventListener(&#39;click&#39;,function(e){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(e.target.innerHTML);\r\n&nbsp;&nbsp;&nbsp;&nbsp;},false);\r\n&nbsp;&nbsp;}\r\n}</pre><p style="white-space: normal;">由上可以看出来，假如不停的删除或添加li，则function（）也要不停的更改操作，易出错，因此推荐使用事件代理。</p><pre>window.onload=function(){\r\n&nbsp;&nbsp;var&nbsp;ul&nbsp;=&nbsp;document.getElementById(&quot;list&quot;);\r\n&nbsp;&nbsp;ul.addEventListener(&#39;click&#39;,function(e){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(e.target&amp;&amp;e.target.nodeName.toUpperCase()==&quot;LI&quot;){&nbsp;&nbsp;&nbsp;//判断目标事件是否为li\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(e.target.innerHTML);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},false);\r\n};</pre><p style="white-space: normal;">我们为父节点ul绑定了监听事件，当其中某个子节点被点击后，由于事件冒泡机制的存在，我们的父节点将监听到click事件，并触发事件处理。</p><p style="white-space: normal;">通过判断e.target.nodeName确定子节点为我们需要监听的li节点，并通过e.target拿到了被点击的li节点，获取对应的内容并处理。</p><p style="white-space: normal;"><strong><span style="font-size: 20px;">事件冒泡及捕获</span></strong></p><p style="white-space: normal;">下面，我们来了解一下事件阶段(event phase)。</p><p style="white-space: normal;">事件冒泡及捕获。</p><p style="white-space: normal;">之前的介绍中已经说到了浏览器的事件冒泡机制。这里再详细介绍一下浏览器处理DOM事件的过程。对于事件的捕获和处理，不同的浏览器厂商有不同的处理机制，这里我们主要介绍W3C对DOM2.0定义的标准事件。</p><p style="white-space: normal;">DOM2.0模型将事件处理流程分为三个阶段：</p><p style="white-space: normal;">一、事件捕获阶段，二、事件目标阶段，三、事件起泡阶段。</p><p style="white-space: normal;">如图：</p><p style="white-space: normal;"><img src="/upload/image/20170516/1494904955261153.jpg" title="1494904955261153.jpg" alt="18141423-8bd09a9c1e184df9a13b6e26b88348f3.jpg"/></p><p style="white-space: normal;">事件捕获阶段(Capture Phase)</p><p style="white-space: normal;">事件的第一个阶段是捕获阶段。事件从文档的根节点出发，随着DOM树的结构向事件的目标节点流去。途中经过各个层次的DOM节点，并在各节点上触发捕获事件，直到到达时间的目标节点。</p><p style="white-space: normal;">目标阶段(Target Phase)</p><p style="white-space: normal;">当到达目标元素之后，执行目标元素该事件相应的处理函数。</p><p style="white-space: normal;">冒泡阶段(Bubble Phase)</p><p style="white-space: normal;">事件在目标事件上触发后，并不在这个元素上终止。它会随着DOM树一层层向上冒泡，直到到达最外层的根节点。也就是说，同一事件会一次在目标节点的父节点，父节点的父节点...直到最外层的节点上触发。</p><p style="white-space: normal;"><strong><span style="font-size: 20px;">Jquery中的事件代理（委托）</span></strong></p><pre>$(selector).delegate(childSelector,event,data,function)</pre><p style="white-space: normal;">上面的例子中，如果用jquery方法来实现，可以这样写：<br/></p><pre>$(&#39;#list&#39;).delegate(&#39;li&#39;,&#39;click&#39;,function(e){\r\n&nbsp;&nbsp;&nbsp;&nbsp;alert(e.target.innerHTML);\r\n});</pre><p style="white-space: normal;"><strong><span style="font-size: 20px;">JavaScript事件代理的优点和注意项</span></strong></p><p style="white-space: normal;">那些需要创建的以及驻留在内存中的事件处理器少了。这是很重要的一点，这样我们就提高了性能，并降低了崩溃的风险。&nbsp;</p><p style="white-space: normal;">在DOM更新后无须重新绑定事件处理器了。如果你的页面是动态生成的，比如说通过Ajax，你不再需要在元素被载入或者卸载的时候来添加或者删除事件处理器了。</p><p style="white-space: normal;">不是所有的事件都能冒泡的。blur、focus、load和unload不能像其它事件一样冒泡。事实上blur和focus可以用事件捕获而非事件冒泡的方法获得。</p><p>在管理鼠标事件的时候有些需要注意的地方。如果你的代码处理mousemove事件的话你遇上性能瓶颈的风险可就大了，因为mousemove事件触发得非常频繁。而mouseout则因为其怪异的表现而变得很难用事件代理来管理。</p><p><br/></p>', 1494905079, 1503421048, 488, 1, 'delegate', '在Javasript中delegate这个词经常出现，看字面的意思，代理、委托。在各种框架中，也经常能看到delegate相关的接口。这些接口又有什么特殊的用法呢？这篇文章就主要通过实例介绍一下javascript delegate的用法和原理。', 'images/thumb_default.jpg', 5),
(73, 'ReactNative部分运行错误及解决方案', '<p><strong>IOS</strong></p><p>错误信息：</p><pre class="brush:bash;toolbar:false">xcrun:&nbsp;error:&nbsp;unable&nbsp;to&nbsp;find&nbsp;utility&nbsp;&quot;instruments&quot;,&nbsp;not&nbsp;a&nbsp;developer&nbsp;tool&nbsp;or&nbsp;in&nbsp;PATH</pre><p>解决方法：在终端执行如下命令</p><pre class="brush:bash;toolbar:false">sudo&nbsp;xcode-select&nbsp;-s&nbsp;/Applications/Xcode.app/Contents/Developer/</pre><p>注意：前提是你已经安装了xcode。</p><p>错误信息：</p><pre class="brush:bash;toolbar:false">&#39;boost/iterator/iterator_adaptor.hpp&#39;&nbsp;file&nbsp;not&nbsp;found</pre><p>产生原因：</p><p>node_modules/react-native/third-party 文件不完整</p><p>或者 /Users/Vanessa/.rncache 中 boost_1_63_0.tar.gz， double-conversion-1.1.5.tar.gz， folly-2016.09.26.00.tar.gz， glog-0.3.4.tar.gz 文件下载不完整</p><p>解决方案：</p><p>把以上文件解压后放入 node_modules/react-native/third-party 下Clean &amp; Build</p><p>删除 .rncache 后重新下载，或手动下载后放入 .rncache 中</p><p><br/></p><p class="p1"><strong>Android</strong></p><p>错误信息&nbsp;</p><pre class="brush:bash;toolbar:false">unable&nbsp;to&nbsp;load&nbsp;script&nbsp;form&nbsp;assets...</pre><p>解决方法：</p><p>1.首先手动在main下建立一个assets文件夹</p><p>2.然后cmd 进入项目的根目录下执行&nbsp;&nbsp;React-native bundle --platform&nbsp;Android&nbsp;--dev false --entry-file index.android.js&nbsp;--bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res</p><p>3.重新执行&nbsp;react-native run-android<br/></p><pre class="brush:js;toolbar:false">Resource&nbsp;entry&nbsp;XXX&nbsp;already&nbsp;defined.&nbsp;Originally&nbsp;defined&nbsp;here.</pre><p class="p2">同名资源<span class="s1"> </span>如<span class="s1">img.png</span>和<span class="s1">img.jpg</span>冲突,重新打包如故，缓存原因。</p><p class="p2">检查android/app/build/intermediates/res/merge<span class="Apple-converted-space">&nbsp;</span>下对应文件夹的内容，并删除同名文件。</p><p><br/></p>', 1501643444, 1503470476, 1329, 1, 'react-native,android,ios,app', 'ReactNative使你能够在Javascript和React的基础上获得完全一致的开发体验，构建世界一流的原生APP。\r\nReactNative开发工具常见运行错误及对应解决方案', 'upload/thumbimg/afa84ec04551308d00f5b179e4c4c6ce.png', 9);
INSERT INTO `blogs` (`id`, `title`, `content`, `created_at`, `updated_at`, `click`, `user_id`, `tags`, `abstract`, `thumb_img`, `cate_id`) VALUES
(74, '前端模块化规范CommonJS|AMD|CMD|ES6', '<p style="white-space: normal;">前端模块化规范</p><p style="white-space: normal;"><br/></p><p style="white-space: normal;">CommonJS</p><p style="white-space: normal;">2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。这标志&quot;Javascript模块化编程&quot;正式诞生。因为老实说，在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。NodeJS是CommonJS规范的实现，webpack 也是以CommonJS的形式来书写。</p><p style="white-space: normal;">CommonJS规范加载模块是同步的</p><p style="white-space: normal;">关键变量：require/exports/module/global</p><pre class="brush:js;toolbar:false">//&nbsp;dep.js\r\nvar&nbsp;content&nbsp;=&nbsp;&#39;this&nbsp;is&nbsp;a&nbsp;dep&#39;\r\nexports.run&nbsp;=&nbsp;function(){&nbsp;&nbsp;&nbsp;&nbsp;\r\nconsole.log(content);\r\n}\r\n//&nbsp;main.js\r\nvar&nbsp;dep&nbsp;=&nbsp;require(&#39;dep.js&#39;);\r\ndep.run();</pre><p style="white-space: normal;">在nodejs中,每个模块中都定义了一个exports变量指向module.exports</p><p style="white-space: normal;">因此如果只使用默认模块输出可以写成 module.exports = xxx;</p><p style="white-space: normal;">切记不可直接使用 export = xxx的方式，因为这样会改变export变量的引用。</p><p style="white-space: normal;"><br/></p><p style="white-space: normal;">AMD/CMD</p><p style="white-space: normal;">为什么将两者并为一块来说，因为两者都是CommonJS针对浏览器端异步加载问题的扩展。</p><p style="white-space: normal;">RequireJS/SeaJS分别是两者的具体实现。</p><p style="white-space: normal;">主要变量: define/require,以及CommonJS的require/exports/module</p><pre class="brush:js;toolbar:false">//AMD&nbsp;&nbsp;--RequireJS\r\ndefine([&#39;dep1&#39;,&#39;dep2&#39;],function(dep1,dep2){\r\nconsole.log(&#39;main&nbsp;run&#39;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;dep1.run();\r\n&nbsp;&nbsp;&nbsp;&nbsp;dep2.run();\r\n});\r\n//CMD&nbsp;&nbsp;--SeaJS\r\ndefine(function(require,exports,module){\r\nconsole.log(&#39;main&nbsp;run&#39;);\r\nvar&nbsp;dep1&nbsp;=&nbsp;require(&#39;dep1&#39;);\r\ndep1.run();\r\nvar&nbsp;dep1&nbsp;=&nbsp;require(&#39;dep1&#39;);\r\ndep2.run();\r\n});</pre><p style="white-space: normal;">对比两者的输出顺序</p><pre class="brush:js;toolbar:false">//AMD\r\ndep1&nbsp;load\r\ndep2&nbsp;load\r\nmain&nbsp;run\r\ndep1&nbsp;run\r\ndep2&nbsp;run\r\n//CMD\r\nmain&nbsp;run\r\ndep1&nbsp;load\r\ndep1&nbsp;run\r\ndep2&nbsp;load\r\ndep2&nbsp;run</pre><p style="white-space: normal;">不难得出两者的最大区别：</p><p style="white-space: normal;">AMD: 依赖前置 所有依赖加载完成后，再运行。</p><p style="white-space: normal;">CMD：依赖就近 先运行，在运行中按需加载模块，推崇 as lazy as possible.</p><p style="white-space: normal;"><br/></p><p style="white-space: normal;">ES6</p><p style="white-space: normal;">ES6，作为JavaScript的官方规范，新增模块（module）体系，有效解决命名冲突、复杂依赖的历史问题，需要注意模块内默认严格模式’use strict’。</p><p style="white-space: normal;">export 输出、import 引出、export default 默认输出项，as 定义别名，* 用于 import 代表除默认项外所有。</p><pre class="brush:js;toolbar:false">//&nbsp;作为变量输出\r\n//&nbsp;dep.js\r\nexport&nbsp;const&nbsp;dep&nbsp;=&nbsp;&quot;dep&quot;\r\nexport&nbsp;function&nbsp;dep(){}\r\nexport&nbsp;{&nbsp;dep&nbsp;};\r\n//&nbsp;main.js\r\nimport&nbsp;{&nbsp;dep&nbsp;}&nbsp;from&nbsp;&#39;dep.js&#39;;\r\nimport&nbsp;*&nbsp;from&nbsp;&#39;dep.js&#39;;</pre><p style="white-space: normal;">变量输出时不输出默认export default的值;</p><pre class="brush:js;toolbar:false">//作为默认输出\r\nexport&nbsp;default&nbsp;dep;\r\nimport&nbsp;dep&nbsp;from&nbsp;&#39;dep.js&#39;;</pre><p style="white-space: normal;"><br/></p>', 1503241349, 1503461846, 1255, 1, 'commonjs,es6,amd,cmd', '随着互联网的飞速发展，前端开发越来越复杂。JavaScript这门语言，已经不仅仅局限于只是附加在web页面上的一个小功能、代码块，而是可以独立完成大型应用。因此对于前端模块化，也越来越重要。', 'upload/thumbimg/8efcd700d0afcfa08b51c35151f088e7.png', 5),
(75, 'HTML标签语义化的理解应用', '<p>众所周知，Html有着众多的标签，如a，div，img，ul等，在以前的开发中，一个html页面结构，常常由多层的div嵌套,对于较为复杂的页面，往往显得有些混乱，并且非常不利于搜索引擎的抓取。因此，前端开发Html标签语义化渐渐被重视并且在Html5中有了较为明显的发展。</p><p>先来看看一个简单的例子：</p><pre class="brush:html;toolbar:false">&lt;div&nbsp;class=&quot;header&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;nav&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;....&lt;/li&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;....&lt;/li&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;....&lt;/li&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\r\n&lt;/div&gt;&nbsp;\r\n&lt;div&nbsp;class=&quot;article&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;section&quot;&gt;....&lt;/div&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;section&quot;&gt;....&lt;/div&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;section&quot;&gt;....&lt;/div&gt;\r\n&lt;/div&gt;&nbsp;\r\n&lt;div&nbsp;class=&quot;aside&quot;&gt;....&lt;/div&gt;&nbsp;\r\n&lt;div&nbsp;class=&quot;footer&quot;&gt;....&lt;/div&gt;</pre><p>上面是没有语义化的写法，借用class的命名来体现每个代码块的意义。</p><pre class="brush:html;toolbar:false">&lt;header&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;nav&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;....&lt;/li&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;....&lt;/li&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;....&lt;/li&gt;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/nav&gt;\r\n&lt;/header&gt;\r\n&lt;article&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;section&gt;....&lt;/section&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;section&gt;....&lt;/section&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;section&gt;....&lt;/section&gt;\r\n&lt;/article&gt;\r\n&lt;aside&gt;....&lt;/aside&gt;\r\n&lt;footer&gt;....&lt;/footer&gt;</pre><p>这是使用了html语义化的写法，在没有定义class时，依然能清晰的体现页面结构。</p><p><br/></p><p>为什么要使用html语义化？个人的理解是主要在以下几个方面：</p><p>1.为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构；</p><p>2.方便不使用CSS的其他设备解析页面（如屏幕阅读器、盲人阅读器、移动设备），凭借语义结构来渲染网页；</p><p>3.有利于SEO，有助于爬虫依据关键的语义标签来抓取有效信息；</p><p>4.语义化更具可读性，便于团队开发和维护，可以减少差异化，在页面重构时提升效率。</p><p><br/></p><p>MDN上对于Html文档结构的改进是这样说明的：</p><p><strong>HTML 4 的文档结构定义和其隐含的大纲算法非常粗糙而且造成了很多问题：</strong></p><p><strong>&nbsp;定义语义性章节的&lt;div&gt; 元素的用法,如果没有为class属性赋以特殊的值，使生成自动生成大纲的算法变得不可能 (&quot;一个div元素&lt;div&gt; 是不是大纲的一部分, 定义的是章节还是子章节?&quot; 或者 &quot;该div元素 &lt;div&gt;是仅仅为了样式化?&quot;)。换句话说, HTML4规范在章节的定义和章节的范围都不精确。 自动生成大纲是重要的,尤其是在倾向于通过根据文档大纲内容去展示内容的辅助技术（ assistive technology）。 HTML5 在自动生成大纲算法的过程中去掉了div元素（&lt;div&gt;），并新增了一个元素，section元素（&lt;section&gt;）。</strong></p><p><strong>合并多个文档是困难的：主文档中包含子文档意味着改变HTML标题元素的级别，以使得文档大纲能够保持下来。 这个已经被HTML5的新的章节元素解决了，因为新引入的元素(&lt;article&gt;, &lt;section&gt;, &lt;nav&gt; 和 &lt;aside&gt;) 总是距离其最近的祖先章节的子章节, 与子文档章节内部的标题没有关系.</strong></p><p><strong>HTML4中，所有的章节都是文档大纲中的一部分。但是文档并不总是这样。文档可以包含那些不是大纲的特殊章节, 但是与文档有关的, 就像广告块和解释区域。 HTML5 引入aside元素 &lt;aside&gt;使得这样的节点不会插入到主纲要中。&nbsp;</strong></p><p><strong>另外, 因为在 HTML4中任何的部分都是文档大纲的一部分, 没有办法产生与网站相关而不是与文档相关的节段，比如logos,menus,目录或版权信息和法律声明。为了这个目的, HTML5 引入了三个特殊的节段 元素： 包含链接集合的nav元素&lt;nav&gt; , 例如目录, 包含网站相关信息的footer元素&lt;footer&gt; 和header元素 &lt;header&gt; 。</strong></p><p><strong>更具有普遍意义的是HTML5使得章节和标题特性更精确。使得文档大纲变的可预测，浏览器使用后也可以提高用户体验。</strong></p><p><br/></p><p>接下来看看使用语义化标签的基本原则。</p><p>一些标签在定义时会使文本呈现出一定的样式，如&lt;em&gt;,&lt;strong&gt;</p><p>&lt;em&gt;告诉浏览器把其中的文本表示为强调的内容。对于所有浏览器来说，这意味着要把这段文字用斜体来显示。</p><p>&lt;strong&gt;和&lt;em&gt;一样，用于强调文本，但它强调的程度更强一些，为了与&lt;em&gt;区分，故通常是用加粗的字体。</p><p>w3c中是这样说明这些标签的定义：</p><p>虽然这些标签定义的文本大多会呈现出特殊的样式，但实际上，这些标签都拥有确切的语义。但是如果您只是为了达到某种视觉效果而使用这些标签的话，我们建议您使用样式表。</p><p>然后我们对比以下非语义化标签&lt;b&gt;和语义化标签&lt;strong&gt;的区别。</p><p>这两者在显示效果上没有任何区别，都是加粗显示。但是我们应该这样理解：</p><p>&lt;b&gt;只是纯粹的为了显示加粗效果而使用，建议用css代替。</p><p>&lt;strong&gt;则是具有语义化的，用于强调文本，而不单是为了显示效果。</p><p>因此，我们在使用语义化标签时，一定要注意，不要为了显示效果而使用语义化，一定是为了优化整个页面的结构，正确的定义使用。</p><p><br/></p>', 1503391115, 1503458280, 1517, 1, 'html', '众所周知，Html有着众多的标签，如a，div，img，ul等，在以前的开发中，一个html页面结构，常常由多层的div嵌套,对于较为复杂的页面，往往显得有些混乱，并且非常不利于搜索引擎的抓取。因此，前端开发Html标签语义化渐渐被重视并且在Html5中有了较为明显的发展。', 'upload/thumbimg/6f00408ea086970b21d212a14c771b68.png', 10);

-- --------------------------------------------------------

--
-- 表的结构 `cates`
--

CREATE TABLE IF NOT EXISTS `cates` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `alias` varchar(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4 AUTO_INCREMENT=11 ;

--
-- 转存表中的数据 `cates`
--

INSERT INTO `cates` (`id`, `name`, `alias`) VALUES
(1, 'Php', 'php'),
(2, 'Linux', 'linux'),
(3, 'Laravel', 'laravel'),
(4, 'Sql', 'sql'),
(5, 'Javascript', 'javascript'),
(6, 'Git', 'git'),
(7, 'Webpack', 'webpack'),
(8, 'CSS', 'css'),
(9, 'APP', 'app'),
(10, 'Html', 'html');

-- --------------------------------------------------------

--
-- 表的结构 `jobs`
--

CREATE TABLE IF NOT EXISTS `jobs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `queue` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `payload` longtext COLLATE utf8_unicode_ci NOT NULL,
  `attempts` tinyint(3) unsigned NOT NULL,
  `reserved` tinyint(3) unsigned NOT NULL,
  `reserved_at` int(10) unsigned DEFAULT NULL,
  `available_at` int(10) unsigned NOT NULL,
  `created_at` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `jobs_queue_reserved_reserved_at_index` (`queue`,`reserved`,`reserved_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `migrations`
--

CREATE TABLE IF NOT EXISTS `migrations` (
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `migrations`
--

INSERT INTO `migrations` (`migration`, `batch`) VALUES
('2014_10_12_000000_create_users_table', 1),
('2014_10_12_100000_create_password_resets_table', 1),
('2017_03_15_072704_create_jobs_table', 1),
('2016_06_01_000001_create_oauth_auth_codes_table', 2),
('2016_06_01_000002_create_oauth_access_tokens_table', 2),
('2016_06_01_000003_create_oauth_refresh_tokens_table', 2),
('2016_06_01_000004_create_oauth_clients_table', 2),
('2016_06_01_000005_create_oauth_personal_access_clients_table', 2);

-- --------------------------------------------------------

--
-- 表的结构 `oauth_access_tokens`
--

CREATE TABLE IF NOT EXISTS `oauth_access_tokens` (
  `id` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `client_id` int(11) NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `scopes` text COLLATE utf8mb4_unicode_ci,
  `revoked` tinyint(1) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `expires_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `oauth_access_tokens_user_id_index` (`user_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `oauth_access_tokens`
--

INSERT INTO `oauth_access_tokens` (`id`, `user_id`, `client_id`, `name`, `scopes`, `revoked`, `created_at`, `updated_at`, `expires_at`) VALUES
('ec9f60a643adeb7d09cd0e12c4e4b2b52a65c20cf1e2eac9eda26a32155df705192a705ff1bdd826', 1, 4, NULL, '[]', 0, '2017-08-14 09:37:53', '2017-08-14 09:37:53', '2018-08-14 17:37:53'),
('5f0a7951a6fb2ca90ec4298a93cf2812824aaacabb5a3c762cb082ec8f5191189e2590b3e523e5bc', 1, 5, NULL, '[]', 0, '2017-08-17 06:54:25', '2017-08-17 06:54:25', '2018-08-17 14:54:25');

-- --------------------------------------------------------

--
-- 表的结构 `oauth_auth_codes`
--

CREATE TABLE IF NOT EXISTS `oauth_auth_codes` (
  `id` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `user_id` int(11) NOT NULL,
  `client_id` int(11) NOT NULL,
  `scopes` text COLLATE utf8mb4_unicode_ci,
  `revoked` tinyint(1) NOT NULL,
  `expires_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- 表的结构 `oauth_clients`
--

CREATE TABLE IF NOT EXISTS `oauth_clients` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `secret` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `redirect` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `personal_access_client` tinyint(1) NOT NULL,
  `password_client` tinyint(1) NOT NULL,
  `revoked` tinyint(1) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `oauth_clients_user_id_index` (`user_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=6 ;

--
-- 转存表中的数据 `oauth_clients`
--

INSERT INTO `oauth_clients` (`id`, `user_id`, `name`, `secret`, `redirect`, `personal_access_client`, `password_client`, `revoked`, `created_at`, `updated_at`) VALUES
(1, NULL, 'Laravel Personal Access Client', 'Tw8WJJMVgWYQ8iJpuf2p3OHJH2Ad4glzHGAC19KF', 'http://localhost', 1, 0, 0, '2017-04-05 06:27:30', '2017-04-05 06:27:30'),
(2, NULL, 'Laravel Password Grant Client', 'eAgQsUAIBXmdQLssOMJ2hMc8gU1YmbGmDpc1ktoU', 'http://localhost', 0, 1, 0, '2017-04-05 06:27:30', '2017-04-05 06:27:30'),
(4, NULL, 'vue_app_pass', 'VUwJC96Fop7g6nc60HoeC7SoNmHMmNgyzXB5aNCl', '', 0, 1, 0, '2017-06-27 16:00:00', '2017-06-27 16:00:00'),
(5, NULL, 'react-native-client', 'Glv7azYIYsacc2AypTrSpBdCbBAukxBjglXk9QyB', 'http://localhost', 0, 1, 0, '2017-08-14 10:02:22', '2017-08-14 10:02:22');

-- --------------------------------------------------------

--
-- 表的结构 `oauth_personal_access_clients`
--

CREATE TABLE IF NOT EXISTS `oauth_personal_access_clients` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `client_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `oauth_personal_access_clients_client_id_index` (`client_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=2 ;

--
-- 转存表中的数据 `oauth_personal_access_clients`
--

INSERT INTO `oauth_personal_access_clients` (`id`, `client_id`, `created_at`, `updated_at`) VALUES
(1, 1, '2017-04-05 06:27:30', '2017-04-05 06:27:30');

-- --------------------------------------------------------

--
-- 表的结构 `oauth_refresh_tokens`
--

CREATE TABLE IF NOT EXISTS `oauth_refresh_tokens` (
  `id` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `access_token_id` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `revoked` tinyint(1) NOT NULL,
  `expires_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `oauth_refresh_tokens_access_token_id_index` (`access_token_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `oauth_refresh_tokens`
--

INSERT INTO `oauth_refresh_tokens` (`id`, `access_token_id`, `revoked`, `expires_at`) VALUES
('16523e23dd9f90185e9a4b65bf8a406c3eae43c1440cd7553a09c67a26aebc9406ccd9bdb68a0efa', '5f0a7951a6fb2ca90ec4298a93cf2812824aaacabb5a3c762cb082ec8f5191189e2590b3e523e5bc', 0, '2018-08-17 14:54:25'),
('d2dd3092f87cbdaf486f0132aec0eb679185b31fedbeb241250224be9e7b9bb2a91be968459859f2', 'ec9f60a643adeb7d09cd0e12c4e4b2b52a65c20cf1e2eac9eda26a32155df705192a705ff1bdd826', 0, '2018-08-14 17:37:53');

-- --------------------------------------------------------

--
-- 表的结构 `password_resets`
--

CREATE TABLE IF NOT EXISTS `password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  KEY `password_resets_email_index` (`email`),
  KEY `password_resets_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `password_resets`
--

INSERT INTO `password_resets` (`email`, `token`, `created_at`) VALUES
('157679749@qq.com', '$2y$10$C92B4YPz9XTUMe1sZ.G1i.uovizmNv7INgA3ga1Az0kagGVyokt6K', '2017-04-20 03:34:39');

-- --------------------------------------------------------

--
-- 表的结构 `register_codes`
--

CREATE TABLE IF NOT EXISTS `register_codes` (
  `email` varchar(100) NOT NULL,
  `code` varchar(128) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `expires_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  UNIQUE KEY `email_2` (`email`),
  KEY `email` (`email`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `register_codes`
--

INSERT INTO `register_codes` (`email`, `code`, `created_at`, `expires_at`) VALUES
('2935724535@qq.com', '$2y$10$GdbHdN62bLCxLTw/BzFVKe.SLsC3wxucUrQEBSumji5oVTsXuVF1y', '2017-06-28 07:13:02', '2017-06-28 07:14:02');

-- --------------------------------------------------------

--
-- 表的结构 `tags`
--

CREATE TABLE IF NOT EXISTS `tags` (
  `tagname` varchar(30) CHARACTER SET utf8 NOT NULL,
  `frequency` int(20) DEFAULT NULL,
  PRIMARY KEY (`tagname`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `tags`
--

INSERT INTO `tags` (`tagname`, `frequency`) VALUES
('amd', 1),
('android', 1),
('apache', 1),
('app', 1),
('cmd', 1),
('commonjs', 1),
('composer', 2),
('css', 3),
('delegate', 1),
('design-pattern', 2),
('es6', 1),
('git', 1),
('html', 1),
('ios', 1),
('jquery', 1),
('js', 1),
('laravel', 5),
('linux', 4),
('memcached', 1),
('mysql', 4),
('php', 5),
('position', 1),
('rbac', 1),
('react-native', 1),
('redis', 1),
('svn', 3),
('ueditor', 1),
('vue', 1),
('webpack', 2);

-- --------------------------------------------------------

--
-- 表的结构 `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `nickname` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `pic` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=3 ;

--
-- 转存表中的数据 `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `password`, `remember_token`, `created_at`, `updated_at`, `nickname`, `pic`) VALUES
(1, 'blank87', '157679749@qq.com', '$2y$10$0FKs2SHrZVgVi9jGplNF1uM6weG89/NgE5mziFR3WsIuix4SpxqtK', 'kOptmkmHGSARjcR0yZ7R8gnZN8y0q9qAbYZ7XUD06l9krrrpI3YLxEAi5xvI', '2017-03-16 19:43:58', '2017-08-16 06:59:16', '清尘', '/upload/userpic/15028667565993ed4496d68.jpg'),
(2, 'test', 'test@163.com', '$2y$10$u7HKtUf4LpyDm6zQehIDKOXJpXaoz3JKmI4po3o0AKvfYCPoMLcX.', '9aXI40dLuY97JUAHfyD6ZZXTRlEykLOSsxkX4aEPXmEKLQcQvjmMka7rCp2c', '2017-04-20 03:35:25', '2017-04-20 03:35:25', NULL, '');

--
-- 限制导出的表
--

--
-- 限制表 `blogs`
--
ALTER TABLE `blogs`
  ADD CONSTRAINT `blog_cate_id` FOREIGN KEY (`cate_id`) REFERENCES `cates` (`id`) ON UPDATE CASCADE;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
